{"ast":null,"code":"/* Copyright (c) 2019-2023 VMware, Inc. All rights reserved. */\nimport { HttpErrorResponse, HttpEvent, HttpHandler, HttpHeaders, HttpRequest } from '@angular/common/http';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { ResourceService } from '~services/resource.service';\nimport { GlobalService } from '~services/global.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"~services/global.service\";\nimport * as i2 from \"~services/resource.service\";\n/**\n * Intercepts error responses and locales the message if possible.\n */\n\nexport let RemotePluginHttpInterceptpr = /*#__PURE__*/(() => {\n  class RemotePluginHttpInterceptpr {\n    constructor(globalService, resourceService) {\n      this.globalService = globalService;\n      this.resourceService = resourceService;\n    }\n\n    intercept(request, next) {\n      if (request.url && request.url.startsWith('./')) {\n        return next.handle(request);\n      }\n\n      return this.getHttpHeaders().pipe(mergeMap(httpHeaders => this.getPluginBackends().pipe(mergeMap(backendInfo => {\n        if (!backendInfo.allPluginBackendServers.length) {\n          return throwError(new Error(this.resourceService.getString('errors.general')));\n        }\n\n        const chassisSampleServerProxiedBaseUrl = backendInfo.allPluginBackendServers[0].proxiedBaseUrl;\n        const url = `${window.location.origin}${chassisSampleServerProxiedBaseUrl}/sample-ui/rest/${request.url}`;\n        const interceptedRequest = request.clone({\n          headers: httpHeaders,\n          url\n        });\n        return next.handle(interceptedRequest).pipe(catchError(response => this.catchResponseError(response)));\n      }))));\n    }\n\n    getPluginBackends() {\n      return new Observable(observer => {\n        this.globalService.htmlClientSdk.app.getPluginBackendInfo(backendInfo => {\n          if (backendInfo) {\n            observer.next(backendInfo);\n            observer.complete();\n          } else {\n            observer.error('Error retrieving plugin backends information.');\n          }\n        });\n      });\n    }\n\n    catchResponseError(response) {\n      if (!!response.error && !!response.error.localeKey) {\n        response.error.message = this.resourceService.getString(response.error.localeKey);\n        return throwError(response.error);\n      }\n\n      return throwError(response);\n    }\n\n    getHttpHeaders() {\n      return this.getSessionInfo().pipe(map(sessionInfo => new HttpHeaders({\n        'Content-Type': 'application/json;charset=utf-8',\n        Accept: 'application/json;charset=utf-8',\n        'Cache-Control': 'no-cache',\n        Pragma: 'no-cache',\n        Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n        'vmware-api-session-id': sessionInfo.sessionToken\n      })));\n    }\n\n    getSessionInfo() {\n      return new Observable(observer => {\n        this.globalService.htmlClientSdk.app.getSessionInfo(sessionInfo => {\n          observer.next(sessionInfo);\n          observer.complete();\n        });\n      });\n    }\n\n  }\n\n  RemotePluginHttpInterceptpr.ɵfac = function RemotePluginHttpInterceptpr_Factory(t) {\n    return new (t || RemotePluginHttpInterceptpr)(i0.ɵɵinject(i1.GlobalService), i0.ɵɵinject(i2.ResourceService));\n  };\n\n  RemotePluginHttpInterceptpr.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RemotePluginHttpInterceptpr,\n    factory: RemotePluginHttpInterceptpr.ɵfac\n  });\n  return RemotePluginHttpInterceptpr;\n})();","map":null,"metadata":{},"sourceType":"module"}