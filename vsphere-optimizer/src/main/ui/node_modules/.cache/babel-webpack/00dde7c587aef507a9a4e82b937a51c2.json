{"ast":null,"code":"/* Copyright (c) 2019-2023 VMware, Inc. All rights reserved. */\nimport { EventEmitter, SimpleChange } from '@angular/core';\nimport { HostsService } from '~services/hosts.service';\nimport { Chassis } from '~models/chassis.model';\nimport { GlobalService } from '~services/global.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"~services/hosts.service\";\nimport * as i2 from \"~services/global.service\";\nimport * as i3 from \"@clr/angular\";\nimport * as i4 from \"@ngx-translate/core\";\n\nfunction HostListComponent_clr_dg_row_19_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"clr-dg-row\", 2);\n    i0.ɵɵelementStart(1, \"clr-dg-cell\");\n    i0.ɵɵelement(2, \"clr-icon\", 3);\n    i0.ɵɵelementStart(3, \"a\", 4);\n    i0.ɵɵlistener(\"click\", function HostListComponent_clr_dg_row_19_Template_a_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const host_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.navigateToHostObject(host_r1.id);\n    })(\"contextmenu\", function HostListComponent_clr_dg_row_19_Template_a_contextmenu_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onContextMenu();\n    });\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"clr-dg-cell\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"clr-dg-cell\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"clr-dg-cell\");\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"clr-dg-cell\", 5);\n    i0.ɵɵtext(12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const host_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"clrDgItem\", host_r1);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(host_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(host_r1.state);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", host_r1.memorySize, \" (MB)\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(host_r1.numCpus);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(host_r1.vCenterName);\n  }\n}\n\nexport let HostListComponent = /*#__PURE__*/(() => {\n  class HostListComponent {\n    constructor(hostsService, globalService) {\n      this.hostsService = hostsService;\n      this.globalService = globalService;\n      this.hostsSelectionChange = new EventEmitter();\n      /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */\n\n      this.onNavigateToHostObject = new EventEmitter();\n      /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */\n\n      this.onError = new EventEmitter();\n      this.loading = false;\n      this._selectedHosts = [];\n    }\n\n    ngOnInit() {\n      this.retrieveHosts();\n    }\n\n    ngOnChanges(changes) {\n      const chassisChange = changes['chassis'];\n\n      if (chassisChange && !chassisChange.isFirstChange() && this.shouldRetrieveHosts(chassisChange)) {\n        this.retrieveHosts();\n      }\n    }\n\n    onContextMenu() {\n      return false;\n    }\n    /**\n     * Setter of the two-way binding with the Datagrid's selected items\n     *\n     * @param selectedHosts - array of the updated Datagrid's selection\n     */\n\n\n    set selectedHosts(selectedHosts) {\n      this._selectedHosts = selectedHosts;\n\n      if (!!selectedHosts) {\n        this.emitHostSelectionChangeEvent(selectedHosts);\n      }\n    }\n    /**\n     * Getter of the two-way binding with the Datagrid's selected items\n     */\n\n\n    get selectedHosts() {\n      return this._selectedHosts;\n    }\n    /**\n     * Navigate To the host summary view of a given objectId\n     */\n\n\n    navigateToHostObject(objectId) {\n      const navigateParams = {\n        objectId\n      };\n      this.globalService.htmlClientSdk.app.navigateTo(navigateParams);\n      this.onNavigateToHostObject.emit();\n    }\n    /**\n     * Refresh the list of host objects.\n     */\n\n\n    retrieveHosts() {\n      this.loading = true;\n      this.hostsService.getConnectedHosts(this.chassis).subscribe(result => {\n        this.connectedHosts = result;\n        this.selectedHosts = this.filterPreselectedHosts(this.connectedHosts);\n        this.loading = false;\n      }, error => {\n        this.loading = false;\n        this.onError.emit(error);\n      });\n    }\n    /**\n     * Filter out an array of preselected Host objects out of all connected\n     * Hosts objects\n     *\n     * @param hostsList\n     */\n\n\n    filterPreselectedHosts(hostsList) {\n      if (!this.preselectedHostsIds) {\n        return null;\n      }\n\n      return hostsList.filter(host => this.preselectedHostsIds.indexOf(host.id) >= 0);\n    }\n    /**\n     * Notify the consumers that Host objects selection has changed.\n     *\n     * @param selectedHosts\n     */\n\n\n    emitHostSelectionChangeEvent(selectedHosts) {\n      this.hostsSelectionChange.emit(selectedHosts.map(host => host.id));\n    }\n    /**\n     * Checks whether a new host has been added/removed to/from the chassis object\n     */\n\n\n    shouldRetrieveHosts(chassisChange) {\n      const previousHosts = chassisChange.previousValue.relatedHostsIds || [];\n      const currentHosts = chassisChange.currentValue.relatedHostsIds || [];\n\n      if (previousHosts.length !== currentHosts.length) {\n        return true;\n      } // Unique hosts in previousHosts\n\n\n      const uniquePreviousHosts = previousHosts.filter(hostFromPrevious => !currentHosts.some(hostFromCurrent => hostFromCurrent === hostFromPrevious));\n\n      if (uniquePreviousHosts.length > 0) {\n        return true;\n      } // Unique hosts is currentHosts\n\n\n      const uniqueCurrentHosts = currentHosts.filter(hostFromCurrent => !previousHosts.some(hostFromPrevious => hostFromPrevious === hostFromCurrent));\n      return uniqueCurrentHosts.length > 0;\n    }\n\n  }\n\n  HostListComponent.ɵfac = function HostListComponent_Factory(t) {\n    return new (t || HostListComponent)(i0.ɵɵdirectiveInject(i1.HostsService), i0.ɵɵdirectiveInject(i2.GlobalService));\n  };\n\n  HostListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HostListComponent,\n    selectors: [[\"app-hosts-list-view\"]],\n    inputs: {\n      preselectedHostsIds: \"preselectedHostsIds\",\n      chassis: \"chassis\"\n    },\n    outputs: {\n      hostsSelectionChange: \"hostsSelectionChange\",\n      onNavigateToHostObject: \"onNavigateToHostObject\",\n      onError: \"onError\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 20,\n    vars: 21,\n    consts: [[3, \"clrDgLoading\", \"clrDgSelected\", \"clrDgSelectedChange\"], [3, \"clrDgItem\", 4, \"clrDgItems\", \"clrDgItemsOf\"], [3, \"clrDgItem\"], [\"shape\", \"host\"], [\"href\", \"javascript:void(0)\", 3, \"click\", \"contextmenu\"], [1, \"word-break\"]],\n    template: function HostListComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"clr-datagrid\", 0);\n        i0.ɵɵlistener(\"clrDgSelectedChange\", function HostListComponent_Template_clr_datagrid_clrDgSelectedChange_0_listener($event) {\n          return ctx.selectedHosts = $event;\n        });\n        i0.ɵɵelementStart(1, \"clr-dg-placeholder\");\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"clr-dg-column\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"clr-dg-column\");\n        i0.ɵɵtext(8);\n        i0.ɵɵpipe(9, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"clr-dg-column\");\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"clr-dg-column\");\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"clr-dg-column\");\n        i0.ɵɵtext(17);\n        i0.ɵɵpipe(18, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(19, HostListComponent_clr_dg_row_19_Template, 13, 6, \"clr-dg-row\", 1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"clrDgLoading\", ctx.loading)(\"clrDgSelected\", ctx.selectedHosts);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 9, \"list.noData\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 11, \"common.name\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 13, \"common.state\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 15, \"vsphere.memorySize\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(15, 17, \"common.cpus\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(18, 19, \"vsphere.vcName\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"clrDgItemsOf\", ctx.connectedHosts);\n      }\n    },\n    directives: [i3.ClrDatagrid, i3.ÇlrDatagridMainRenderer, i3.ÇlrDatagridWillyWonka, i3.ÇlrActionableOompaLoompa, i3.ÇlrExpandableOompaLoompa, i3.ClrDatagridPlaceholder, i3.ClrDatagridColumn, i3.ÇlrDatagridHeaderRenderer, i3.ClrDatagridItems, i3.ClrDatagridRow, i3.ÇlrDatagridRowRenderer, i3.ClrDatagridCell, i3.ÇlrDatagridCellRenderer, i3.ClrIconCustomTag],\n    pipes: [i4.TranslatePipe],\n    styles: [\".word-break[_ngcontent-%COMP%]{overflow-wrap:break-word}\"]\n  });\n  return HostListComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}