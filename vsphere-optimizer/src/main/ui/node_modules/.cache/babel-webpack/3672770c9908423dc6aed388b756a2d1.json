{"ast":null,"code":"import { TranslateService } from '@ngx-translate/core';\nimport { GlobalService } from '~services/global.service';\nimport { Router } from '@angular/router';\nimport { ResourceService } from '~services/resource.service';\nimport { MessagingService } from '~services/messaging.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"~services/global.service\";\nimport * as i3 from \"~services/messaging.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"~services/resource.service\";\nimport * as i6 from \"@angular/common\";\n\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelement(1, \"router-outlet\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(translate, globalService, messagingService, router, resourceService) {\n      this.translate = translate;\n      this.globalService = globalService;\n      this.messagingService = messagingService;\n      this.router = router;\n      this.resourceService = resourceService;\n      this.initialThemeLoadComplete = false;\n      this.messagingServiceInitialized = false;\n    }\n\n    get initialized() {\n      return this.globalService.htmlClientSdk.isInitialized() && this.initialThemeLoadComplete && this.messagingServiceInitialized;\n    }\n\n    ngOnInit() {\n      this.translate.onLangChange.subscribe(() => {\n        this.resourceService.loadStrings();\n      });\n      this.translate.addLangs(['en-US', 'de-DE', 'fr-FR']);\n      this.translate.setDefaultLang('en-US');\n      this.globalService.htmlClientSdk.initialize(() => {\n        this.messagingService.init$().subscribe({\n          error: () => {\n            this.messagingServiceInitialized = true;\n          },\n          complete: () => {\n            this.messagingServiceInitialized = true;\n          }\n        });\n        const navData = this.globalService.htmlClientSdk.app.getNavigationData();\n\n        if (navData && navData.navigationPath && navData.selectedChassis) {\n          this.router.navigateByUrl(navData.navigationPath, {\n            state: {\n              selectedChassis: navData.selectedChassis\n            },\n            replaceUrl: true\n          });\n        }\n\n        const locale = this.globalService.htmlClientSdk.app.getClientLocale();\n\n        if (locale && this.translate.getLangs().indexOf(locale) > 0) {\n          this.translate.use(locale);\n        } else {\n          this.translate.use(this.translate.getDefaultLang());\n        }\n\n        if (this.globalService.htmlClientSdk.app.getTheme && this.globalService.htmlClientSdk.event.onThemeChanged) {\n          this.loadTheme(true, this.globalService.htmlClientSdk.app.getTheme());\n          this.globalService.htmlClientSdk.event.onThemeChanged(this.loadTheme.bind(this, false));\n        } else {\n          this.loadTheme(true, {\n            name: 'light'\n          });\n        }\n      });\n    }\n\n    loadTheme(firstLoad, theme) {\n      let themeName = theme.name;\n      const supportedThemeNames = ['light', 'dark'];\n\n      if (supportedThemeNames.indexOf(themeName) === -1) {\n        themeName = supportedThemeNames[0];\n      }\n\n      const styleSheetLinkElement = document.getElementById('theme-stylesheet-link');\n      const themeCssUrl = `theme-${themeName}.css`;\n\n      if (firstLoad) {\n        const initialThemeLoadCompleteListener = event => {\n          this.initialThemeLoadComplete = true;\n          styleSheetLinkElement.removeEventListener('load', initialThemeLoadCompleteListener);\n          styleSheetLinkElement.removeEventListener('error', initialThemeLoadCompleteListener);\n        };\n\n        styleSheetLinkElement.addEventListener('load', initialThemeLoadCompleteListener);\n        styleSheetLinkElement.addEventListener('error', initialThemeLoadCompleteListener);\n      }\n\n      styleSheetLinkElement.setAttribute('href', themeCssUrl);\n      document.documentElement.setAttribute('data-theme', themeName);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.TranslateService), i0.ɵɵdirectiveInject(i2.GlobalService), i0.ɵɵdirectiveInject(i3.MessagingService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i5.ResourceService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"appContent\", 4, \"ngIf\"], [1, \"appContent\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AppComponent_div_0_Template, 2, 0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.initialized);\n      }\n    },\n    directives: [i6.NgIf, i4.RouterOutlet],\n    styles: [\"[_nghost-%COMP%]{display:block;width:100%;height:100%}.appContent[_ngcontent-%COMP%]{width:100%;height:100%}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}