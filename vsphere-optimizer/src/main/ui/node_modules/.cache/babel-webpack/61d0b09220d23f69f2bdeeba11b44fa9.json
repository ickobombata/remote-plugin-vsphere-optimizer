{"ast":null,"code":"import { Chassis } from '~models/chassis.model';\nimport { of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { map, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChassisService = /*#__PURE__*/(() => {\n  class ChassisService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Creates a new object of type Chassis.\n     *\n     * @param chassis - the new chassis to be created.\n     */\n\n\n    create(chassis) {\n      chassis.name = chassis.name.trim();\n      return this.http.post('chassis', JSON.stringify(chassis)).pipe(map(_ => undefined));\n    }\n    /**\n     * Edit the given chassis.\n     *\n     * @param chassis - the edited chassis.\n     */\n\n\n    edit(chassis) {\n      const newChassis = Object.assign(new Chassis(), chassis);\n      newChassis.name = newChassis.name.trim();\n      return this.http.put('chassis/edit', JSON.stringify(chassis)).pipe(map(_ => undefined));\n    }\n\n    remove(target) {\n      if (typeof target === 'string') {\n        return this.http.delete(`chassis/${target}`).pipe(map(_ => undefined));\n      } else {\n        const chassisIds = target.join(',');\n        return this.http.delete('chassis/delete', {\n          params: {\n            ids: `${chassisIds}`\n          }\n        }).pipe(map(_ => undefined));\n      }\n    }\n    /**\n     * Retrieves all related Chassis to the provided objectId.\n     *\n     * @param objectId\n     */\n\n\n    getRelatedChassis(objectId) {\n      return this.http.get(`hosts/${objectId}/chassis`).pipe(mergeMap(result => of(result)));\n    }\n    /**\n     * Retrieves all chassis.\n     */\n\n\n    getAllChassis() {\n      return this.http.get('chassis').pipe(mergeMap(result => {\n        for (const chassis of result) {\n          chassis.healthStatus = 45;\n          chassis.complianceStatus = 81;\n        }\n\n        return of(result);\n      }));\n    }\n\n  }\n\n  ChassisService.ɵfac = function ChassisService_Factory(t) {\n    return new (t || ChassisService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ChassisService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChassisService,\n    factory: ChassisService.ɵfac\n  });\n  return ChassisService;\n})();","map":null,"metadata":{},"sourceType":"module"}