{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HostsService = /*#__PURE__*/(() => {\n  class HostsService {\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Sends a get message to get all connected hosts\n     */\n\n\n    getConnectedHosts(chassis) {\n      const endpoint = chassis ? `chassis/${chassis.id}/hosts` : 'hosts';\n      return this.http.get(endpoint).pipe(mergeMap(result => of(result)));\n    }\n    /**\n     * Sends a message to edit the Host object\n     */\n\n\n    edit(host) {\n      const endpoint = 'hosts';\n      return this.http.put(endpoint, host).pipe(map(_ => undefined));\n    }\n\n    optmize() {\n      const endpoint = 'hosts/scale';\n      this.http.post(endpoint, null).pipe(map(_ => undefined)).subscribe({\n        error: () => console.log('error'),\n        complete: () => console.log('good')\n      });\n    }\n\n  }\n\n  HostsService.ɵfac = function HostsService_Factory(t) {\n    return new (t || HostsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HostsService,\n    factory: HostsService.ɵfac\n  });\n  return HostsService;\n})();","map":null,"metadata":{},"sourceType":"module"}