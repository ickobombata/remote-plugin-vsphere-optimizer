{"ast":null,"code":"import { Observable, Subject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MessagingService = /*#__PURE__*/(() => {\n  class MessagingService {\n    constructor(http) {\n      this.http = http;\n      this._initStarted = false;\n      this._initSubject = new Subject();\n      this._messageSubject = new Subject();\n      this._closeSubject = new Subject();\n      this._onInitWebSocketOpenBound = this.onInitWebSocketOpen.bind(this);\n      this._onInitWebSocketCloseBound = this.onInitWebSocketClose.bind(this);\n      this._onWebSocketMessageBound = this.onWebSocketMessage.bind(this);\n      this._onWebSocketCloseBound = this.onWebSocketClose.bind(this);\n      this.messages$ = this._messageSubject.asObservable();\n      this.close$ = this._closeSubject.asObservable();\n    }\n\n    init$() {\n      if (this._initStarted) {\n        throw new Error('[MessagingService] init$() has already been called.');\n      }\n\n      this._initStarted = true; // The WebSocket JS API does not support additional headers to be added during\n      // initialization. On the other hand sending the PSID in the url as a parameter\n      // is not secure, since the URL is logged by proxies and servers.\n      // To workaround this security issue a special ticket is generated by the backend which\n      // is related to the PSID, however an attacker can not guess the PSID based on the ticket.\n      // This ticket is used in the URL parameter during the WebSocket initialization.\n\n      this.http.get(`websocket/session/generate-ticket`).subscribe(sessionTicket => {\n        if (!sessionTicket) {\n          this._initSubject.error(undefined);\n\n          return;\n        }\n\n        const anchorElement = document.createElement('a');\n        anchorElement.href = 'messaging' + `?session-ticket=${sessionTicket}`;\n        const messagingUrl = `wss://${anchorElement.host}${anchorElement.pathname}${anchorElement.search}`;\n        this._webSocket = new WebSocket(messagingUrl);\n        this.addInitWebSocketListeners();\n      }, error => {\n        this._initSubject.error(error);\n      });\n      return this._initSubject.asObservable();\n    }\n\n    onInitWebSocketOpen() {\n      console.log('[MessagingService] WebSocket opened.');\n      this.removeInitWebSocketListeners();\n      this.addWebSocketListeners();\n\n      this._initSubject.complete();\n    }\n\n    onInitWebSocketClose(event) {\n      console.log('[MessagingService] WebSocket closed with:', event);\n      this.removeInitWebSocketListeners();\n\n      this._initSubject.error(undefined);\n    }\n\n    addInitWebSocketListeners() {\n      this._webSocket.addEventListener('open', this._onInitWebSocketOpenBound);\n\n      this._webSocket.addEventListener('close', this._onInitWebSocketCloseBound);\n    }\n\n    removeInitWebSocketListeners() {\n      this._webSocket.removeEventListener('open', this._onInitWebSocketOpenBound);\n\n      this._webSocket.removeEventListener('close', this._onInitWebSocketCloseBound);\n    }\n\n    onWebSocketMessage(event) {\n      console.log('[MessagingService] Received a WebSocket message:', event);\n      const message = JSON.parse(event.data);\n\n      this._messageSubject.next(message);\n    }\n\n    onWebSocketClose(event) {\n      console.log('[MessagingService] WebSocket closed with:', event);\n      this.removeWebSocketListeners();\n\n      this._closeSubject.complete();\n    }\n\n    addWebSocketListeners() {\n      this._webSocket.addEventListener('message', this._onWebSocketMessageBound);\n\n      this._webSocket.addEventListener('close', this._onWebSocketCloseBound);\n    }\n\n    removeWebSocketListeners() {\n      this._webSocket.removeEventListener('message', this._onWebSocketMessageBound);\n\n      this._webSocket.removeEventListener('close', this._onWebSocketCloseBound);\n    }\n\n  }\n\n  MessagingService.ɵfac = function MessagingService_Factory(t) {\n    return new (t || MessagingService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MessagingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MessagingService,\n    factory: MessagingService.ɵfac\n  });\n  return MessagingService;\n})();","map":null,"metadata":{},"sourceType":"module"}