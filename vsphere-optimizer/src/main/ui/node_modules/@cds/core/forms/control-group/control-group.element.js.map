{"version":3,"file":"control-group.element.js","sources":["../../../../src/forms/control-group/control-group.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { query } from 'lit/decorators/query.js';\nimport { baseStyles, property, querySlot, querySlotAll, id, event, syncDefinedProps, describeElementByElements, updateComponentLayout, setAttributes, syncProps, } from '@cds/core/internal';\nimport styles from './control-group.element.scss';\nimport { getStatusIcon, controlIsWrapped, formLayouts, inlineControlListIsWrapped, defaultFormLayout, defaultControlWidth, getCurrentMessageStatus, } from '../utils/index.js';\n/**\n * Internal Control Group\n *\n * ```typescript\n * import '@cds/core/forms/register.js';\n * ```\n *\n * ```html\n * <cds-internal-control-group>\n *   <label>...</label>\n *   <cds-control>\n *     <label></label>\n *     <input ... />\n *   </cds-control>\n *   <cds-control>\n *     <label></label>\n *     <input ... />\n *   </cds-control>\n * </cds-internal-control-group>\n * ```\n *\n * @element cds-internal-control-group\n * @slot - For projecting control group\n */\nexport class CdsInternalControlGroup extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Set the status of control group validation\n         * @type {neutral | error | success}\n         */\n        this.status = 'neutral';\n        /** @type {horizontal | horizontal-inline | vertical | vertical-inline | compact} */\n        this.layout = defaultFormLayout;\n        /** Align the labels of controls within group left or right */\n        this.controlAlign = 'left';\n        /** Disable all controls within a control group or omit and disable controls individually */\n        this.disabled = false;\n        /**\n         * Adjust the control from the default full width or the browser default width\n         * @type {stretch | shrink}\n         */\n        this.controlWidth = defaultControlWidth;\n        /**\n         * By default forms will collapse to layout that prevents overflow.\n         * If disabled control layout may break or overflow in unexpected ways.\n         */\n        this.responsive = true;\n        this.isInlineControlGroup = false;\n        this.isControlGroup = true;\n        this.observers = [];\n    }\n    get messagesTemplate() {\n        return html ` <div\n      ?hidden=${this.messages.length === 0}\n      cds-layout=\"horizontal align:shrink gap:sm wrap:none\"\n      class=\"messages-container\"\n    >\n      ${!this.isInlineControlGroup ? getStatusIcon(this.status) : ''}\n      <div class=\"messages\">\n        <slot name=\"message\" @slotchange=${this.updateControlMessages}></slot>\n      </div>\n    </div>`;\n    }\n    get controlsTemplate() {\n        return this.isInlineControlGroup\n            ? html `\n          <div cds-layout=\"horizontal gap:sm align:horizontal-stretch\" class=\"input-container\">\n            <div class=\"controls\" cds-layout=\"horizontal align:horizontal-stretch wrap:none\">\n              <slot name=\"controls\"></slot>\n            </div>\n            ${getStatusIcon(this.status)}\n          </div>\n        `\n            : html `\n          <div cds-layout=\"horizontal align:shrink\" class=\"input-container\">\n            <div class=\"controls\" cds-layout=\"${this.inlineControlLayout}\">\n              <slot name=\"controls\"></slot>\n            </div>\n          </div>\n        `;\n    }\n    get inlineControlLayout() {\n        return `${!this.layout.includes('inline') && this.layout !== 'compact' ? 'vertical gap:sm' : 'horizontal gap:md'} ${!this.layout.includes('vertical') ? 'wrap:none' : ''}`;\n    }\n    get primaryLabelLayout() {\n        return !this.layout.includes('vertical') ? 'horizontal gap:lg' : 'vertical gap:sm';\n    }\n    get controlMessageLayout() {\n        return `${this.layout === 'compact' ? 'horizontal' : 'vertical'} gap:sm wrap:none align:stretch`;\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" cds-layout=${this.primaryLabelLayout}>\n        <cds-internal-control-label .disabled=${this.disabled} cds-layout=\"align:top\" action=\"primary\">\n          <slot name=\"label\"></slot>\n        </cds-internal-control-label>\n        <div class=\"control-message-container\" cds-layout=${this.controlMessageLayout}>\n          ${this.controlsTemplate} ${this.messagesTemplate}\n        </div>\n      </div>\n    `;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        setAttributes(this, ['role', 'group'], ['cds-control-group', '']);\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        this.associateLabelAndGroup();\n        this.setupResponsive();\n    }\n    updated(props) {\n        super.updated(props);\n        props.set('isControlGroup', true);\n        this.controls.forEach((c) => (c.isControlGroup = true));\n        this.messages.forEach(message => syncProps(message, this, { disabled: props.has('disabled') }));\n        syncDefinedProps(props, this, Array.from(this.controls));\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.observers.forEach(o => o.disconnect());\n    }\n    /** @private */\n    get layoutStable() {\n        return (!inlineControlListIsWrapped(Array.from(this.controls), this.layout) &&\n            !controlIsWrapped(this.controlSlot, this.controlLabel, this.layout));\n    }\n    associateLabelAndGroup() {\n        this.setAttribute('aria-labelledby', this.groupLabelId);\n        this.label.setAttribute('id', this.groupLabelId);\n    }\n    async updateControlMessages() {\n        describeElementByElements(this, Array.from(this.messages));\n        this.status = await getCurrentMessageStatus(Array.from(this.messages));\n    }\n    setupResponsive() {\n        if (this.responsive) {\n            const layoutConfig = { layouts: formLayouts, initialLayout: this.layout };\n            this.observers.push(updateComponentLayout(this, layoutConfig, () => this.layoutChange.emit(this.layout, { bubbles: true })));\n        }\n    }\n}\nCdsInternalControlGroup.styles = [baseStyles, styles];\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"status\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"layout\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"controlAlign\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsInternalControlGroup.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: String })\n], CdsInternalControlGroup.prototype, \"controlWidth\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsInternalControlGroup.prototype, \"responsive\", void 0);\n__decorate([\n    querySlot('label', {\n        assign: 'label',\n        required: 'warning',\n        requiredMessage: 'To meet a11y standards a <label> should be provided',\n    })\n], CdsInternalControlGroup.prototype, \"label\", void 0);\n__decorate([\n    querySlotAll('cds-control, [cds-control]')\n], CdsInternalControlGroup.prototype, \"controls\", void 0);\n__decorate([\n    querySlotAll('cds-control-message')\n], CdsInternalControlGroup.prototype, \"messages\", void 0);\n__decorate([\n    query('cds-internal-control-label[action=primary]', true)\n], CdsInternalControlGroup.prototype, \"controlLabel\", void 0);\n__decorate([\n    query('.controls', true)\n], CdsInternalControlGroup.prototype, \"controlSlot\", void 0);\n__decorate([\n    id()\n], CdsInternalControlGroup.prototype, \"groupLabelId\", void 0);\n__decorate([\n    event()\n], CdsInternalControlGroup.prototype, \"layoutChange\", void 0);\n"],"names":["CdsInternalControlGroup","LitElement","constructor","super","this","status","layout","defaultFormLayout","controlAlign","disabled","controlWidth","defaultControlWidth","responsive","isInlineControlGroup","isControlGroup","observers","messagesTemplate","html","messages","length","getStatusIcon","updateControlMessages","controlsTemplate","inlineControlLayout","includes","primaryLabelLayout","controlMessageLayout","render","connectedCallback","setAttributes","firstUpdated","props","associateLabelAndGroup","setupResponsive","updated","set","controls","forEach","c","message","syncProps","has","syncDefinedProps","Array","from","disconnectedCallback","o","disconnect","layoutStable","inlineControlListIsWrapped","controlIsWrapped","controlSlot","controlLabel","setAttribute","groupLabelId","label","async","describeElementByElements","getCurrentMessageStatus","layoutConfig","layouts","formLayouts","initialLayout","push","updateComponentLayout","layoutChange","emit","bubbles","styles","baseStyles","__decorate","property","type","String","prototype","Boolean","querySlot","assign","required","requiredMessage","querySlotAll","query","id","event"],"mappings":"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"}