import{render as e}from"lit";function t(t){const n=document.createElement("div");return document.body.appendChild(n),t&&e(t,n),Promise.all(Array.from(document.querySelectorAll(":not(:defined)")).map((e=>customElements.whenDefined(e.tagName)))).then((()=>n))}function n(e){e.remove()}function o(e){var t;return Array.from(null===(t=e.shadowRoot)||void 0===t?void 0:t.querySelectorAll("slot")).reduce(((e,t)=>(e[t.name.length>0?t.name:"default"]=t.assignedNodes().reduce(((e,t)=>{let n=t.outerHTML;return n=t.outerHTML?t.outerHTML:t.textContent.trim(),e+(n||"")}),""),e)),{})}function r(e,t=10,n,o={resolve:null,reject:null}){return t--,n=n||new Promise(((e,t)=>{o.resolve=e,o.reject=t})),e().then((e=>{o.resolve(e)})).catch((()=>{t>0?r(e,t,n,o):o.reject("Max attempts reached")})),n}function u(e){return r((()=>new Promise((async(t,n)=>{await e.updateComplete?t("success"):n("error")}))))}function c(e){const t=new MouseEvent("mousedown"),n=new MouseEvent("mouseup"),o=new MouseEvent("click");e.dispatchEvent(t),e.dispatchEvent(n),e.dispatchEvent(o)}function s(e,t){return new Promise((n=>{e.addEventListener(t,(e=>n(e)))}))}export{u as componentIsStable,t as createTestElement,c as emulatedClick,o as getComponentSlotContent,s as onceEvent,n as removeTestElement};
//# sourceMappingURL=utils.js.map
