{"version":3,"file":"navigation-start.element.js","sources":["../../../src/navigation/navigation-start.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { baseStyles, createId, i18n, I18nService, property, querySlot, querySlotAll, spanWrapper, state, } from '@cds/core/internal';\nimport itemStyles from './navigation-item.element.scss';\nimport { getToggleIconDirection, manageScreenReaderElements, NAVIGATION_TEXT_WRAPPER } from './utils/index.js';\nexport const CdsNavigationStartTagName = 'cds-navigation-start';\n/**\n * Web component navigation.\n *\n * ```typescript\n * import '@cds/core/navigation/register.js';\n * ```\n *\n * ```html\n * <cds-navigation-start>Start text</cds-navigation-start>\n * ```\n * @beta\n * @element cds-navigation-start\n * @cssprop --color: inherit\n * @cssprop --line-height: inherit\n * @cssprop --font-size: inherit\n * @cssprop --font-weight: inherit\n * @slot\n * @slot cds-navigation-start-icon - customize the default start toggle icon\n */\nexport class CdsNavigationStart extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.i18n = I18nService.keys.navigation;\n        /**\n         * @desc\n         * Synced down from the root navigation element. Determines if the vertical navigation is wide or narrow.\n         */\n        this.expandedRoot = false;\n        /**\n         * @desc\n         * Is set to true by the root cds-navigation element when the instance is focused.\n         */\n        this.hasFocus = false;\n        /**\n         * @desc\n         * The value is synced down from the root cds-navigation element.\n         */\n        this.isGroupStart = false;\n        /**\n         * @desc info synced down from group element and used in css to set proper bg color if a group has an active item and is not expanded\n         *\n         * @private\n         */\n        this.active = false;\n        /**\n         * @desc\n         * Describes the groups expanded state\n         *\n         * @private\n         */\n        this.expanded = false;\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.role = 'listitem';\n        if (!this.id) {\n            this.id = createId();\n        }\n    }\n    firstUpdated(props) {\n        var _a;\n        super.firstUpdated(props);\n        const button = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector('button');\n        if (button) {\n            this.focusElement = button;\n        }\n        this.handleStartButtonText();\n    }\n    handleStartButtonText() {\n        var _a;\n        spanWrapper(this.childNodes);\n        // get the projected text now wrapped in a span and add the sr attribute.\n        (_a = this.querySelector('span')) === null || _a === void 0 ? void 0 : _a.setAttribute(NAVIGATION_TEXT_WRAPPER, '');\n    }\n    renderRootStart() {\n        return html `\n      <slot @slotchange=${this.handleStartButtonText}></slot>\n      <button\n        aria-pressed=\"${this.expandedRoot}\"\n        aria-label=\"${this.expandedRoot ? this.i18n.navigationUnabridgedText : this.i18n.navigationAbridgedText}\"\n        id=\"${this.isGroupStart ? this.navigationGroupId : ''}\"\n        type=\"button\"\n      >\n        <div cds-layout=\"horizontal align:vertical-center\">\n          <span class=\"icon-slot\" cds-layout=\"${this.expandedRoot ? 'align:right' : 'align:left'}\">\n            <slot name=\"cds-icon-slot\">\n              ${this.startIcon\n            ? ''\n            : html ` <cds-icon\n                    size=\"${!this.expandedRoot && this.isGroupStart ? 'xs' : 'sm'}\"\n                    shape=\"${this.isGroupStart ? 'angle' : 'angle-double'}\"\n                    direction=\"${this.toggleIconDirection}\"\n                  >\n                  </cds-icon>`}\n            </slot>\n          </span>\n        </div>\n      </button>\n    `;\n    }\n    renderGroupStart() {\n        return html `\n      <button aria-expanded=\"${this.expanded}\" id=\"${this.isGroupStart ? this.navigationGroupId : ''}\" type=\"button\">\n        <div cds-layout=\"horizontal wrap:none align:vertical-center gap:md\">\n          <slot @slotchange=${this.handleStartButtonText}></slot>\n          <span class=\"icon-slot\" cds-layout=\"${this.expandedRoot ? 'align:right' : 'align:left'}\">\n            <slot name=\"cds-icon-slot\">\n              ${this.startIcon\n            ? ''\n            : html ` <cds-icon\n                    size=\"${!this.expandedRoot && this.isGroupStart ? 'xs' : 'sm'}\"\n                    shape=\"${this.isGroupStart ? 'angle' : 'angle-double'}\"\n                    direction=\"${this.toggleIconDirection}\"\n                  >\n                  </cds-icon>`}\n            </slot>\n          </span>\n        </div>\n      </button>\n    `;\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" cds-layout=\"horizontal align:vertical-center align:horizontal-stretch\">\n        ${this.isGroupStart ? this.renderGroupStart() : this.renderRootStart()}\n      </div>\n    `;\n    }\n    static get styles() {\n        return [baseStyles, itemStyles];\n    }\n    get toggleIconDirection() {\n        return getToggleIconDirection(this);\n    }\n    updated(props) {\n        super.updated(props);\n        manageScreenReaderElements(this, this.expandedRoot);\n    }\n}\n__decorate([\n    i18n()\n], CdsNavigationStart.prototype, \"i18n\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsNavigationStart.prototype, \"expandedRoot\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsNavigationStart.prototype, \"hasFocus\", void 0);\n__decorate([\n    property({ type: Boolean, reflect: true })\n], CdsNavigationStart.prototype, \"isGroupStart\", void 0);\n__decorate([\n    property({ type: String })\n], CdsNavigationStart.prototype, \"navigationGroupId\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsNavigationStart.prototype, \"active\", void 0);\n__decorate([\n    state({ type: Boolean, reflect: true })\n], CdsNavigationStart.prototype, \"expanded\", void 0);\n__decorate([\n    querySlot('[cds-navigation-start-icon]', { assign: 'cds-icon-slot' })\n], CdsNavigationStart.prototype, \"startIcon\", void 0);\n__decorate([\n    querySlotAll('[cds-navigation-sr-text]')\n], CdsNavigationStart.prototype, \"itemText\", void 0);\n"],"names":["CdsNavigationStartTagName","CdsNavigationStart","LitElement","constructor","super","this","i18n","I18nService","keys","navigation","expandedRoot","hasFocus","isGroupStart","active","expanded","connectedCallback","role","id","createId","firstUpdated","props","_a","button","shadowRoot","querySelector","focusElement","handleStartButtonText","spanWrapper","childNodes","setAttribute","NAVIGATION_TEXT_WRAPPER","renderRootStart","html","navigationUnabridgedText","navigationAbridgedText","navigationGroupId","startIcon","toggleIconDirection","renderGroupStart","render","styles","baseStyles","itemStyles","getToggleIconDirection","updated","manageScreenReaderElements","__decorate","prototype","property","type","Boolean","state","reflect","String","querySlot","assign","querySlotAll"],"mappings":"0ZAUY,MAACA,EAA4B,uBAoBlC,MAAMC,UAA2BC,EACpCC,cACIC,oBACAC,KAAKC,KAAOC,EAAYC,KAAKC,WAK7BJ,KAAKK,cAAe,EAKpBL,KAAKM,UAAW,EAKhBN,KAAKO,cAAe,EAMpBP,KAAKQ,QAAS,EAOdR,KAAKS,UAAW,EAEpBC,oBACIX,MAAMW,oBACNV,KAAKW,KAAO,WACPX,KAAKY,KACNZ,KAAKY,GAAKC,KAGlBC,aAAaC,GACT,IAAIC,EACJjB,MAAMe,aAAaC,GACnB,MAAME,EAAoC,QAA1BD,EAAKhB,KAAKkB,kBAA+B,IAAPF,OAAgB,EAASA,EAAGG,cAAc,UACxFF,IACAjB,KAAKoB,aAAeH,GAExBjB,KAAKqB,wBAETA,wBACI,IAAIL,EACJM,EAAYtB,KAAKuB,YAEqB,QAArCP,EAAKhB,KAAKmB,cAAc,eAA4B,IAAPH,GAAyBA,EAAGQ,aAAaC,EAAyB,IAEpHC,kBACI,OAAOC,CAAK,sBACM3B,KAAKqB,uDAEPrB,KAAKK,6BACPL,KAAKK,aAAeL,KAAKC,KAAK2B,yBAA2B5B,KAAKC,KAAK4B,+BAC3E7B,KAAKO,aAAeP,KAAK8B,kBAAoB,4GAIX9B,KAAKK,aAAe,cAAgB,4CAEpEL,KAAK+B,UACP,GACAJ,CAAK,oBACU3B,KAAKK,cAAgBL,KAAKO,aAAe,KAAO,gBAChDP,KAAKO,aAAe,QAAU,8BAC1BP,KAAKgC,kEASlCC,mBACI,OAAON,CAAK,0BACW3B,KAAKS,iBAAiBT,KAAKO,aAAeP,KAAK8B,kBAAoB,4GAEpE9B,KAAKqB,qEACarB,KAAKK,aAAe,cAAgB,4CAEpEL,KAAK+B,UACP,GACAJ,CAAK,oBACU3B,KAAKK,cAAgBL,KAAKO,aAAe,KAAO,gBAChDP,KAAKO,aAAe,QAAU,8BAC1BP,KAAKgC,kEASlCE,SACI,OAAOP,CAAK,oGAEV3B,KAAKO,aAAeP,KAAKiC,mBAAqBjC,KAAK0B,0BAI9CS,oBACP,MAAO,CAACC,EAAYC,GAEpBL,0BACA,OAAOM,EAAuBtC,MAElCuC,QAAQxB,GACJhB,MAAMwC,QAAQxB,GACdyB,EAA2BxC,KAAMA,KAAKK,eAG9CoC,EAAW,CACPxC,KACDL,EAAmB8C,UAAW,YAAQ,GACzCD,EAAW,CACPE,EAAS,CAAEC,KAAMC,WAClBjD,EAAmB8C,UAAW,oBAAgB,GACjDD,EAAW,CACPK,EAAM,CAAEF,KAAMC,QAASE,SAAS,KACjCnD,EAAmB8C,UAAW,gBAAY,GAC7CD,EAAW,CACPE,EAAS,CAAEC,KAAMC,QAASE,SAAS,KACpCnD,EAAmB8C,UAAW,oBAAgB,GACjDD,EAAW,CACPE,EAAS,CAAEC,KAAMI,UAClBpD,EAAmB8C,UAAW,yBAAqB,GACtDD,EAAW,CACPK,EAAM,CAAEF,KAAMC,QAASE,SAAS,KACjCnD,EAAmB8C,UAAW,cAAU,GAC3CD,EAAW,CACPK,EAAM,CAAEF,KAAMC,QAASE,SAAS,KACjCnD,EAAmB8C,UAAW,gBAAY,GAC7CD,EAAW,CACPQ,EAAU,8BAA+B,CAAEC,OAAQ,mBACpDtD,EAAmB8C,UAAW,iBAAa,GAC9CD,EAAW,CACPU,EAAa,6BACdvD,EAAmB8C,UAAW,gBAAY"}