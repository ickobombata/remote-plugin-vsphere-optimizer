{"version":3,"file":"progress-circle.utils.js","sources":["../../../src/progress-circle/progress-circle.utils.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isNilOrEmpty } from '@cds/core/internal';\n// note: these may be of more general use with progress bars in general; perhaps promote them at some point???\n// 36 is the default viewbox dimensions\nexport function getProgressCircleRadius(lineThickness, viewboxDimension = 36) {\n    // we need to keep this so that circular-progress remains aligned with our icons\n    // we shouldn't change it unless we change the default viewbox of the icons!\n    const halfOfViewbox = viewboxDimension / 2;\n    // line offset takes the width/thickness of the progress circle into account\n    const lineOffset = Math.ceil(lineThickness / 2);\n    return halfOfViewbox - lineOffset;\n}\n// TODO: once the global i18n templating from the datagrid is merged in, pretty much all\n// of this code and a good chunk of code in progress-circle.element.ts can go away\nexport function getAriaLabelFromTemplate(currentValue, loadingi18n, forceToValue) {\n    const value = isNilOrEmpty(forceToValue) ? currentValue : forceToValue;\n    // this default will be overrideable once the datagrid enhancements to i18n are in\n    return `${loadingi18n} ${value}%`;\n}\nexport function getDefaultAriaLabel(currentValue, loadingi18n, loopingMsg) {\n    if (isNilOrEmpty(currentValue)) {\n        return loopingMsg;\n    }\n    else {\n        return getAriaLabelFromTemplate(currentValue, loadingi18n);\n    }\n}\nexport function getAriaLabelOrDefault(existingAriaLabel, currentValue, loadingi18n, loopingMsg, previousValue) {\n    switch (true) {\n        case !existingAriaLabel:\n            return getDefaultAriaLabel(currentValue, loadingi18n, loopingMsg);\n        case previousValue && existingAriaLabel === getAriaLabelFromTemplate(currentValue, loadingi18n, previousValue):\n            return getDefaultAriaLabel(currentValue, loadingi18n, loopingMsg);\n        default:\n            return existingAriaLabel;\n    }\n}\nexport function getProgressCircleAriaAttributes(currentValue, ariaLabel) {\n    if (isNilOrEmpty(currentValue)) {\n        // no value so return aria attrs of the looping progress circle\n        return [\n            ['role', 'img'],\n            ['aria-valuemin', false],\n            ['aria-valuemax', false],\n            ['aria-valuenow', false],\n            ['aria-label', ariaLabel],\n        ];\n    }\n    else {\n        // if the progress has a value, then we return as if we expect it to be incrementing\n        return [\n            ['role', 'progressbar'],\n            ['aria-valuemin', '0'],\n            ['aria-valuemax', '100'],\n            ['aria-valuenow', currentValue + ''],\n            ['aria-label', ariaLabel],\n        ];\n    }\n}\n"],"names":["getProgressCircleRadius","lineThickness","viewboxDimension","Math","ceil","getAriaLabelFromTemplate","currentValue","loadingi18n","forceToValue","isNilOrEmpty","getDefaultAriaLabel","loopingMsg","getAriaLabelOrDefault","existingAriaLabel","previousValue","getProgressCircleAriaAttributes","ariaLabel"],"mappings":"kDAQO,SAASA,EAAwBC,EAAeC,EAAmB,IAMtE,OAHsBA,EAAmB,EAEtBC,KAAKC,KAAKH,EAAgB,GAK1C,SAASI,EAAyBC,EAAcC,EAAaC,GAGhE,MAAO,GAAGD,KAFIE,EAAaD,GAAgBF,EAAeE,KAIvD,SAASE,EAAoBJ,EAAcC,EAAaI,GAC3D,OAAIF,EAAaH,GACNK,EAGAN,EAAyBC,EAAcC,GAG/C,SAASK,EAAsBC,EAAmBP,EAAcC,EAAaI,EAAYG,GAC5F,QAAQ,GACJ,KAAMD,EAEN,KAAKC,GAAiBD,IAAsBR,EAAyBC,EAAcC,EAAaO,GAC5F,OAAOJ,EAAoBJ,EAAcC,EAAaI,GAC1D,QACI,OAAOE,GAGZ,SAASE,EAAgCT,EAAcU,GAC1D,OAAIP,EAAaH,GAEN,CACH,CAAC,OAAQ,OACT,CAAC,iBAAiB,GAClB,CAAC,iBAAiB,GAClB,CAAC,iBAAiB,GAClB,CAAC,aAAcU,IAKZ,CACH,CAAC,OAAQ,eACT,CAAC,gBAAiB,KAClB,CAAC,gBAAiB,OAClB,CAAC,gBAAiBV,EAAe,IACjC,CAAC,aAAcU"}