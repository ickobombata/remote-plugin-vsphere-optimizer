{"version":3,"file":"progress-circle.element.js","sources":["../../../src/progress-circle/progress-circle.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { baseStyles, hasStringPropertyChanged, listenForAttributeChange, property, setAttributes, updateEquilateralSizeStyles, I18nService, i18n, isNilOrEmpty, } from '@cds/core/internal';\nimport { html, LitElement } from 'lit';\nimport isNil from 'ramda/es/isNil.js'; // TODO: REPLACE AFTER DROPDOWN MERGE TO PREVENT CIRCULAR DEPENDENCIES\nimport styles from './progress-circle.element.scss';\nimport { getAriaLabelOrDefault, getDefaultAriaLabel, getProgressCircleAriaAttributes, getProgressCircleRadius, } from './progress-circle.utils.js';\n/**\n * Circular progress indicators provide a method to track how close long-running tasks are to\n * completion. Circular progress offer a compact way to track progress in a variety of situations.\n *\n * ```typescript\n * import '@cds/core/progress-circle/register.js';\n * ```\n *\n * ```html\n * <cds-progress-circle status=\"info\" value=\"25\"></cds-progress-circle>\n * ```\n *\n * @element cds-progress-circle\n * @cssprop --ring-color\n * @cssprop --ring-opacity\n * @cssprop --fill-color\n * @cssprop --fill-speed\n */\nexport class CdsProgressCircle extends LitElement {\n    constructor() {\n        super(...arguments);\n        /**\n         * Sets the color of the badge\n         * @type {neutral | info | success | warning | danger}\n         */\n        this.status = 'neutral';\n        /**\n         * Inverts color of circular progress bar if `true`.\n         * Useful for displaying icons on a dark background.\n         */\n        this.inverse = false;\n        /**\n         * Represents the thickness of the stroke of the circular progress.\n         *\n         * If undefined, it defaults to 3.\n         */\n        this.line = 3;\n        this.i18n = I18nService.keys.progress;\n        this.observers = [];\n    }\n    get radius() {\n        // 36 is the default viewbox dimensions\n        return getProgressCircleRadius(this.line);\n    }\n    get circumference() {\n        return 2 * Math.PI * this.radius;\n    }\n    /** @private */\n    get progress() {\n        const defaultProgress = 30;\n        return isNil(this.value) ? defaultProgress : this.value;\n    }\n    // Manages the progress fill.\n    get progressOffset() {\n        const progressMax = 100;\n        return ((progressMax - this.progress) / progressMax) * this.circumference;\n    }\n    get size() {\n        return this._size;\n    }\n    /**\n     * Apply numerical width-height or a t-shirt-sized CSS classname\n     * @type {string | sm | md | lg | xl | xxl}\n     */\n    set size(val) {\n        if (hasStringPropertyChanged(val, this._size)) {\n            const oldVal = this._size;\n            this._size = val;\n            updateEquilateralSizeStyles(this, val);\n            this.requestUpdate('size', oldVal);\n        }\n    }\n    /**\n     * The aria-label attribute is added here as a convenience. It is not set\n     * to a default value.\n     *\n     * If this attribute/property remains unset, it will default to an i18n string.\n     * This means that the aria-label can be customized using the aria-label\n     * attribute or by overriding the i18n value for the progress circle.\n     */\n    get ariaLabel() {\n        return getAriaLabelOrDefault(this._ariaLabel, this.value, this.i18n.loading, this.i18n.looping);\n    }\n    /**\n     * Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\n     * the specified icon cannot be found in the icon registry.\n     */\n    set ariaLabel(newAriaLabel) {\n        if (hasStringPropertyChanged(newAriaLabel, this._ariaLabel)) {\n            const oldVal = this._ariaLabel;\n            this._ariaLabel = newAriaLabel;\n            this.requestUpdate('ariaLabel', oldVal);\n        }\n    }\n    // note: this aria attr logic could be reused when we introduce progress bars\n    // consider promoting this to a shared utility in internal in the future\n    /** @private */\n    setAriaAttributes(oldValueForAriaLabelCheck) {\n        const currentValue = this.value;\n        const oldValIsNil = isNilOrEmpty(oldValueForAriaLabelCheck);\n        let ariaLabel;\n        if (oldValIsNil) {\n            if (!isNilOrEmpty(currentValue) && this.ariaLabel === this.i18n.looping) {\n                ariaLabel = getDefaultAriaLabel(currentValue, this.i18n.loading, this.i18n.looping);\n            }\n            else {\n                ariaLabel = this.ariaLabel;\n            }\n        }\n        else {\n            ariaLabel = getAriaLabelOrDefault(this._ariaLabel, currentValue, this.i18n.loading, this.i18n.looping, oldValueForAriaLabelCheck);\n        }\n        const attrsToSet = getProgressCircleAriaAttributes(currentValue, ariaLabel);\n        setAttributes(this, ...attrsToSet);\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        this.setAriaAttributes();\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.observers.forEach(o => o.disconnect());\n    }\n    firstUpdated(props) {\n        super.firstUpdated(props);\n        // FIXME: we need the mutation observer here because the i18n decorator property\n        // is not firing an update as expected. maybe if we move it to a reactive\n        // controller it will work with the lifecycle again?\n        this.observers.push(listenForAttributeChange(this, 'cds-i18n', () => {\n            const oldAriaLabel = this.ariaLabel;\n            this.ariaLabel = '';\n            this.requestUpdate('ariaLabel', oldAriaLabel);\n        }));\n    }\n    // note: this update logic could be reused when we introduce progress bars\n    // consider promoting this to a shared utility in internal in the future\n    updated(props) {\n        super.updated(props);\n        if (props.has('value')) {\n            this.setAriaAttributes(props.get('value'));\n        }\n        else if (props.has('ariaLabel')) {\n            this.setAriaAttributes();\n        }\n        else if (props.has('ariaLabelTemplate')) {\n            // if you update the template or i18n (edge case), you force reset of aria-label...\n            this._ariaLabel = null;\n            this.setAriaAttributes(this.value);\n        }\n    }\n    render() {\n        return html `\n      <div class=\"private-host\" aria-hidden=\"true\">\n        <div class=\"progress-wrapper\">\n          <svg\n            version=\"1.1\"\n            viewBox=\"0 0 36 36\"\n            preserveAspectRatio=\"xMidYMid meet\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            focusable=\"false\"\n          >\n            <circle\n              stroke-width=\"${this.line}\"\n              fill=\"none\"\n              cx=\"18\"\n              cy=\"18\"\n              r=\"${this.radius}\"\n              class=\"${this.progress > 99 ? 'arcstroke' : 'backstroke'}\"\n            />\n            <path\n              d=\"M 18 18 m 0,-${this.radius} a ${this.radius},${this.radius} 0 1 1 0,${2 * this.radius} a ${this\n            .radius},${this.radius} 0 1 1 0,-${2 * this.radius}\"\n              class=\"fillstroke arcstroke\"\n              stroke-width=\"${this.line}\"\n              stroke-dasharray=\"${this.circumference}\"\n              stroke-dashoffset=\"${this.progressOffset}\"\n              fill=\"none\"\n            />\n          </svg>\n        </div>\n      </div>\n    `;\n    }\n    static get styles() {\n        return [baseStyles, styles];\n    }\n}\n__decorate([\n    property({ type: String })\n], CdsProgressCircle.prototype, \"status\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsProgressCircle.prototype, \"inverse\", void 0);\n__decorate([\n    property({ type: Number })\n], CdsProgressCircle.prototype, \"value\", void 0);\n__decorate([\n    property({ type: Number })\n], CdsProgressCircle.prototype, \"line\", void 0);\n__decorate([\n    property({ type: String })\n], CdsProgressCircle.prototype, \"size\", null);\n__decorate([\n    property({ type: String })\n], CdsProgressCircle.prototype, \"ariaLabel\", null);\n__decorate([\n    i18n()\n], CdsProgressCircle.prototype, \"i18n\", void 0);\n"],"names":["CdsProgressCircle","LitElement","constructor","super","this","status","inverse","line","i18n","I18nService","keys","progress","observers","radius","getProgressCircleRadius","circumference","Math","PI","isNil","value","progressOffset","size","_size","val","hasStringPropertyChanged","oldVal","updateEquilateralSizeStyles","requestUpdate","ariaLabel","getAriaLabelOrDefault","_ariaLabel","loading","looping","newAriaLabel","setAriaAttributes","oldValueForAriaLabelCheck","currentValue","isNilOrEmpty","getDefaultAriaLabel","attrsToSet","getProgressCircleAriaAttributes","setAttributes","connectedCallback","disconnectedCallback","forEach","o","disconnect","firstUpdated","props","push","listenForAttributeChange","oldAriaLabel","updated","has","get","render","html","styles","baseStyles","__decorate","property","type","String","prototype","Boolean","Number"],"mappings":"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"}