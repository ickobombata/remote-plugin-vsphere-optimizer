{"version":3,"file":"icon.classnames.js","sources":["../../../../src/icon/utils/icon.classnames.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isTshirtSize, pxToRem, replaceWord, updateElementStyles, unsetElementStyles } from '@cds/core/internal';\nimport isNil from 'ramda/es/isNil.js'; // TODO: REPLACE WITH INTERNAL FN AFTER MERGING DROPDOWN BRANCH\nexport var SizeUpdateStrategies;\n(function (SizeUpdateStrategies) {\n    SizeUpdateStrategies[\"BadSizeValue\"] = \"bad-value\";\n    SizeUpdateStrategies[\"ValidSizeString\"] = \"value-is-string\";\n    SizeUpdateStrategies[\"ValidNumericString\"] = \"value-is-numeric\";\n    SizeUpdateStrategies[\"NilSizeValue\"] = \"value-is-nil\";\n})(SizeUpdateStrategies || (SizeUpdateStrategies = {}));\nexport function getUpdateSizeStrategy(size) {\n    if (isNil(size) || size === '') {\n        return SizeUpdateStrategies.NilSizeValue;\n    }\n    if (isTshirtSize(size)) {\n        return SizeUpdateStrategies.ValidSizeString;\n    }\n    if (!isNaN(parseInt(size, 10)) && size.match(/^[0-9 ]+$/)) {\n        return SizeUpdateStrategies.ValidNumericString;\n    }\n    return SizeUpdateStrategies.BadSizeValue;\n}\nexport function getSizeValue(size) {\n    return isNil(size) || size === '' ? '' : replaceWord(size, 'fit');\n}\nexport function updateIconSizeStyle(el, size) {\n    const updateStrategy = getUpdateSizeStrategy(getSizeValue(size));\n    const isFitSized = isNil(size) ? false : size.indexOf('fit') > -1;\n    let val = '';\n    switch (updateStrategy) {\n        case SizeUpdateStrategies.ValidNumericString:\n            val = pxToRem(parseInt(size)); // set val in block to run expensive call only when needed\n            if (isFitSized) {\n                updateElementStyles(el, ['width', 'auto'], ['height', 'auto'], ['min-width', val], ['min-height', val]);\n            }\n            else {\n                updateElementStyles(el, ['width', val], ['height', val], ['min-width', val], ['min-height', val]);\n            }\n            return;\n        case SizeUpdateStrategies.ValidSizeString:\n            unsetElementStyles(el, 'width', 'height', 'min-width', 'min-height');\n            return;\n        case SizeUpdateStrategies.NilSizeValue: // nil values empty out all sizing\n            unsetElementStyles(el, 'width', 'height', 'min-width', 'min-height');\n            return;\n        case SizeUpdateStrategies.BadSizeValue:\n            // bad-value is ignored\n            return;\n        default:\n            return;\n    }\n}\n"],"names":["SizeUpdateStrategies","getUpdateSizeStrategy","size","isNil","NilSizeValue","isTshirtSize","ValidSizeString","isNaN","parseInt","match","ValidNumericString","BadSizeValue","getSizeValue","replaceWord","updateIconSizeStyle","el","updateStrategy","isFitSized","indexOf","val","pxToRem","updateElementStyles","unsetElementStyles"],"mappings":"kKAOU,IAACA,EAOJ,SAASC,EAAsBC,GAClC,OAAIC,EAAMD,IAAkB,KAATA,EACRF,EAAqBI,aAE5BC,EAAaH,GACNF,EAAqBM,iBAE3BC,MAAMC,SAASN,EAAM,MAAQA,EAAKO,MAAM,aAClCT,EAAqBU,mBAEzBV,EAAqBW,aAEzB,SAASC,EAAaV,GACzB,OAAOC,EAAMD,IAAkB,KAATA,EAAc,GAAKW,EAAYX,EAAM,OAExD,SAASY,EAAoBC,EAAIb,GACpC,MAAMc,EAAiBf,EAAsBW,EAAaV,IACpDe,GAAad,EAAMD,IAAgBA,EAAKgB,QAAQ,QAAU,EAChE,IAAIC,EAAM,GACV,OAAQH,GACJ,KAAKhB,EAAqBU,mBAQtB,OAPAS,EAAMC,EAAQZ,SAASN,SACnBe,EACAI,EAAoBN,EAAI,CAAC,QAAS,QAAS,CAAC,SAAU,QAAS,CAAC,YAAaI,GAAM,CAAC,aAAcA,IAGlGE,EAAoBN,EAAI,CAAC,QAASI,GAAM,CAAC,SAAUA,GAAM,CAAC,YAAaA,GAAM,CAAC,aAAcA,KAGpG,KAAKnB,EAAqBM,gBAG1B,KAAKN,EAAqBI,aAEtB,YADAkB,EAAmBP,EAAI,QAAS,SAAU,YAAa,cAE3D,KAAKf,EAAqBW,aAG1B,QACI,SA7CZ,SAAWX,GACPA,EAAmC,aAAI,YACvCA,EAAsC,gBAAI,kBAC1CA,EAAyC,mBAAI,mBAC7CA,EAAmC,aAAI,eAJ3C,CAKGA,IAAyBA,EAAuB"}