{"version":3,"file":"modal.element.js","sources":["../../../src/modal/modal.element.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html } from 'lit';\nimport { animate, AnimationModalEnterName, i18n, I18nService, property, reverseAnimation, } from '@cds/core/internal';\nimport { CdsInternalOverlay } from '@cds/core/internal-components/overlay';\nimport { appendCloseButton, removeCloseButton } from '@cds/core/internal-components/close-button';\nimport styles from './modal.element.scss';\n/**\n * Web component modal.\n *\n * ```typescript\n * import '@cds/core/modal/register.js';\n * ```\n *\n * ```html\n * <cds-modal>\n *   <cds-modal-header>\n *      <h3 cds-text=\"title\">My Modal</h3>\n *   </cds-modal-header>\n *   <cds-modal-content>\n *     <p>Lorem Ipsum</p>\n *   </cds-modal-content>\n *   <cds-modal-actions>\n *       <cds-button>Ok</cds-button>\n *   </cds-modal-actions>\n * </cds-modal>\n * ```\n *\n * @element cds-modal\n * @slot\n * @slot cds-modal-content\n * @slot cds-modal-header\n * @slot cds-modal-actions\n * @event closeChange - notify when the user has clicked the close button\n * @cssprop --backdrop-background - inherited from the internal overlay component\n * @cssprop --layered-backdrop-background - inherited from the internal overlay component\n * @cssprop --border-color\n * @cssprop --border-width\n * @cssprop --border-radius\n * @cssprop --background\n * @cssprop --box-shadow\n * @cssprop --width\n * @cssprop --content-overflow - set as { x, y }. take care when customizing because overflow settings can have unintended side effects.\n * @cssprop --max-height - sets hard limit on height of modal\n * @cssprop --tablet-max-height - sets hard limit on height of modal when on a tablet in landscape mode\n */\nlet CdsModal = class CdsModal extends CdsInternalOverlay {\n    constructor() {\n        super(...arguments);\n        this.i18n = I18nService.keys.modal;\n        /** If false, the modal will not render the close button.  */\n        this.closable = true;\n    }\n    static get styles() {\n        return [...super.styles, styles];\n    }\n    toggleCloseButton() {\n        const closeButtonAttrs = [\n            ['cds-layout', 'align:top'],\n            ['slot', 'close-button'],\n            ['aria-label', this.i18n.closeButtonAriaLabel],\n            ['icon-size', '24'],\n        ];\n        if (this.closable) {\n            appendCloseButton(this, closeButtonAttrs, () => this.closeOverlay('close-button-click'));\n        }\n        else {\n            removeCloseButton(this);\n        }\n    }\n    // TODO: Document what's going on here with the role dialog and aria modal true\n    // Also document why we have to keep everything in the light Dom\n    updated(props) {\n        if (props.has('closable')) {\n            this.toggleCloseButton();\n        }\n        super.update(props);\n    }\n    // modal-body requires a tab index so it can be scrolled\n    render() {\n        return html `\n      ${this.backdropTemplate}\n      <div class=\"modal-dialog private-host\" tabindex=\"-1\" cds-layout=\"m:md m@md:xl\">\n        <div cds-layout=\"display:screen-reader-only\">${this.i18n.contentStart}</div>\n        <div class=\"modal-content\" cds-layout=\"vertical gap:md gap@md:lg align:stretch\">\n          <div cds-layout=\"horizontal gap:md wrap:none align:vertical-center p-x:lg p-t:lg\">\n            <div>\n              <slot name=\"modal-header\"></slot>\n            </div>\n            <div cds-layout=\"align:right\">\n              <slot name=\"modal-header-actions\"></slot>\n            </div>\n            <slot name=\"close-button\"></slot>\n          </div>\n          <div class=\"modal-body\" tabindex=\"0\" aria-label=\"${this.i18n.contentBox}\" cds-layout=\"p-x:lg\">\n            <slot></slot>\n          </div>\n          <div cds-layout=\"align-stretch p-x:lg p-b:lg\">\n            <slot name=\"modal-actions\"></slot>\n          </div>\n        </div>\n        <div cds-layout=\"display:screen-reader-only\">${this.i18n.contentEnd}</div>\n      </div>\n    `;\n    }\n};\n__decorate([\n    i18n()\n], CdsModal.prototype, \"i18n\", void 0);\n__decorate([\n    property({ type: Boolean })\n], CdsModal.prototype, \"closable\", void 0);\n__decorate([\n    property({ type: String })\n], CdsModal.prototype, \"size\", void 0);\nCdsModal = __decorate([\n    animate({\n        hidden: {\n            true: reverseAnimation(AnimationModalEnterName),\n            false: AnimationModalEnterName,\n        },\n    })\n], CdsModal);\nexport { CdsModal };\n"],"names":["CdsModal","CdsInternalOverlay","constructor","super","this","i18n","I18nService","keys","modal","closable","styles","toggleCloseButton","closeButtonAttrs","closeButtonAriaLabel","appendCloseButton","closeOverlay","removeCloseButton","updated","props","has","update","render","html","backdropTemplate","contentStart","contentBox","contentEnd","__decorate","prototype","property","type","Boolean","String","animate","hidden","true","reverseAnimation","AnimationModalEnterName","false"],"mappings":"+ZAkDG,IAACA,EAAW,cAAuBC,EAClCC,cACIC,oBACAC,KAAKC,KAAOC,EAAYC,KAAKC,MAE7BJ,KAAKK,UAAW,EAETC,oBACP,MAAO,IAAIP,MAAMO,OAAQA,GAE7BC,oBACI,MAAMC,EAAmB,CACrB,CAAC,aAAc,aACf,CAAC,OAAQ,gBACT,CAAC,aAAcR,KAAKC,KAAKQ,sBACzB,CAAC,YAAa,OAEdT,KAAKK,SACLK,EAAkBV,KAAMQ,GAAkB,IAAMR,KAAKW,aAAa,wBAGlEC,EAAkBZ,MAK1Ba,QAAQC,GACAA,EAAMC,IAAI,aACVf,KAAKO,oBAETR,MAAMiB,OAAOF,GAGjBG,SACI,OAAOC,CAAK,GACZlB,KAAKmB,+IAE0CnB,KAAKC,KAAKmB,wYAWJpB,KAAKC,KAAKoB,+LAOhBrB,KAAKC,KAAKqB,2BAKjEC,EAAW,CACPtB,KACDL,EAAS4B,UAAW,YAAQ,GAC/BD,EAAW,CACPE,EAAS,CAAEC,KAAMC,WAClB/B,EAAS4B,UAAW,gBAAY,GACnCD,EAAW,CACPE,EAAS,CAAEC,KAAME,UAClBhC,EAAS4B,UAAW,YAAQ,GAC/B5B,EAAW2B,EAAW,CAClBM,EAAQ,CACJC,OAAQ,CACJC,KAAMC,EAAiBC,GACvBC,MAAOD,MAGhBrC"}