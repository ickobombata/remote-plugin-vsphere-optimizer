{"version":3,"file":"string.js","sources":["../../../../src/internal/utils/string.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { isNilOrEmpty, isNumericString } from './identity.js';\nexport function transformToString(delimiter, fns, ...args) {\n    return fns\n        .map(fn => {\n        return fn(...args);\n    })\n        .join(delimiter)\n        .trim();\n}\n// have to go this route because ramda curry throws typescript for loops\nexport function transformToSpacedString(fns, ...args) {\n    return transformToString(' ', fns, ...args);\n}\nexport function transformToUnspacedString(fns, ...args) {\n    return transformToString('', fns, ...args);\n}\nexport function camelCaseToKebabCase(value) {\n    return value.replace(/[A-Z]/g, l => `-${l.toLowerCase()}`);\n}\nexport function kebabCaseToCamelCase(str) {\n    return str\n        .split('-')\n        .map((item, index) => (index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item))\n        .join('');\n}\nexport function kebabCaseToPascalCase(string) {\n    const camelCase = kebabCaseToCamelCase(string);\n    return capitalizeFirstLetter(camelCase);\n}\n/**\n * Take a object map of css properties and if value concatenate string of all computed values\n * Useful for dynamic style tags in lit templates\n */\nexport function setStyles(styles) {\n    return createPropStyleSelectors(Object.keys(styles), styles);\n}\nexport function setPropStyles(styles) {\n    return createPropStyleSelectors(Object.keys(styles).filter(prop => prop.startsWith('--')), styles);\n}\nfunction createPropStyleSelectors(props, styles) {\n    return props.reduce((allStyles, prop) => `${allStyles}${styles[prop] ? `${prop}:${styles[prop]};` : ''}`, '');\n}\nexport function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/** Used for Storybook docs to define knob group for css properties */\nexport const cssGroup = 'CSS Custom Properties';\n/** Used for Storybook docs to define knob group for JavaScript properties */\nexport const propertiesGroup = 'Default Properties';\nexport function getNumericValueFromCssSecondsStyleValue(styleValueInSeconds) {\n    const secondsStringChecker = /(\\d+)?\\.?(\\d+)?s/g;\n    if (!styleValueInSeconds || !styleValueInSeconds.match(secondsStringChecker)) {\n        return 0; // validate expected input\n    }\n    const copyVal = styleValueInSeconds.substr(0, styleValueInSeconds.length - 1); // cut off trailing 's'\n    return isNumericString(copyVal) ? Number(copyVal) : 0;\n}\nexport function isPrefixedOrSuffixedBy(str, stringFix, prefixOrSuffix = 'prefix') {\n    if (isNilOrEmpty(stringFix) || isNilOrEmpty(str)) {\n        return false;\n    }\n    const myFixToTest = prefixOrSuffix === 'prefix' ? str.substr(0, stringFix.length) : str.substr(-1 * stringFix.length);\n    return myFixToTest === stringFix;\n}\nexport function isPrefixedBy(str, prefix) {\n    return isPrefixedOrSuffixedBy(str, prefix, 'prefix');\n}\nexport function isSuffixedBy(str, suffix) {\n    return isPrefixedOrSuffixedBy(str, suffix, 'suffix');\n}\nexport function removePrefixOrSuffix(str, stringFix, prefixOrSuffix = 'prefix') {\n    if (isNilOrEmpty(str)) {\n        return '';\n    }\n    if (isNilOrEmpty(stringFix) || !isPrefixedOrSuffixedBy(str, stringFix, prefixOrSuffix)) {\n        return str;\n    }\n    switch (prefixOrSuffix) {\n        case 'prefix':\n            return str.substr(stringFix.length);\n        case 'suffix':\n            return str.substr(0, str.length - stringFix.length);\n        default:\n            return str;\n    }\n}\nexport function removePrefix(str, prefix) {\n    return removePrefixOrSuffix(str, prefix, 'prefix');\n}\nexport function removeSuffix(str, suffix) {\n    return removePrefixOrSuffix(str, suffix, 'suffix');\n}\nexport function replaceWord(str, wordToReplace, replaceWith = '') {\n    const words = str.split(' ');\n    const returnWords = replaceWith === ''\n        ? words.filter(w => w !== wordToReplace)\n        : words.map(w => (w === wordToReplace ? replaceWith : w));\n    return returnWords.length > 0 ? returnWords.join(' ') : '';\n}\n"],"names":["transformToString","delimiter","fns","args","map","fn","join","trim","transformToSpacedString","transformToUnspacedString","camelCaseToKebabCase","value","replace","l","toLowerCase","kebabCaseToCamelCase","str","split","item","index","charAt","toUpperCase","slice","kebabCaseToPascalCase","string","capitalizeFirstLetter","setStyles","styles","createPropStyleSelectors","Object","keys","setPropStyles","filter","prop","startsWith","props","reduce","allStyles","cssGroup","propertiesGroup","getNumericValueFromCssSecondsStyleValue","styleValueInSeconds","match","copyVal","substr","length","isNumericString","Number","isPrefixedOrSuffixedBy","stringFix","prefixOrSuffix","isNilOrEmpty","isPrefixedBy","prefix","isSuffixedBy","suffix","removePrefixOrSuffix","removePrefix","removeSuffix","replaceWord","wordToReplace","replaceWith","words","returnWords","w"],"mappings":"kEAMO,SAASA,EAAkBC,EAAWC,KAAQC,GACjD,OAAOD,EACFE,KAAIC,GACEA,KAAMF,KAEZG,KAAKL,GACLM,OAGF,SAASC,EAAwBN,KAAQC,GAC5C,OAAOH,EAAkB,IAAKE,KAAQC,GAEnC,SAASM,EAA0BP,KAAQC,GAC9C,OAAOH,EAAkB,GAAIE,KAAQC,GAElC,SAASO,EAAqBC,GACjC,OAAOA,EAAMC,QAAQ,UAAUC,GAAK,IAAIA,EAAEC,gBAEvC,SAASC,EAAqBC,GACjC,OAAOA,EACFC,MAAM,KACNb,KAAI,CAACc,EAAMC,IAAWA,EAAQD,EAAKE,OAAO,GAAGC,cAAgBH,EAAKI,MAAM,GAAGR,cAAgBI,IAC3FZ,KAAK,IAEP,SAASiB,EAAsBC,GAElC,OAAOC,EADWV,EAAqBS,IAOpC,SAASE,EAAUC,GACtB,OAAOC,EAAyBC,OAAOC,KAAKH,GAASA,GAElD,SAASI,EAAcJ,GAC1B,OAAOC,EAAyBC,OAAOC,KAAKH,GAAQK,QAAOC,GAAQA,EAAKC,WAAW,QAAQP,GAE/F,SAASC,EAAyBO,EAAOR,GACrC,OAAOQ,EAAMC,QAAO,CAACC,EAAWJ,IAAS,GAAGI,IAAYV,EAAOM,GAAQ,GAAGA,KAAQN,EAAOM,MAAW,MAAM,IAEvG,SAASR,EAAsBD,GAClC,OAAOA,EAAOJ,OAAO,GAAGC,cAAgBG,EAAOF,MAAM,GAG7C,MAACgB,EAAW,wBAEXC,EAAkB,qBACxB,SAASC,EAAwCC,GAEpD,IAAKA,IAAwBA,EAAoBC,MADpB,qBAEzB,OAAO,EAEX,MAAMC,EAAUF,EAAoBG,OAAO,EAAGH,EAAoBI,OAAS,GAC3E,OAAOC,EAAgBH,GAAWI,OAAOJ,GAAW,EAEjD,SAASK,EAAuBhC,EAAKiC,EAAWC,EAAiB,UACpE,OAAIC,EAAaF,KAAcE,EAAanC,KAGL,WAAnBkC,EAA8BlC,EAAI4B,OAAO,EAAGK,EAAUJ,QAAU7B,EAAI4B,QAAQ,EAAIK,EAAUJ,WACvFI,EAEpB,SAASG,EAAapC,EAAKqC,GAC9B,OAAOL,EAAuBhC,EAAKqC,EAAQ,UAExC,SAASC,EAAatC,EAAKuC,GAC9B,OAAOP,EAAuBhC,EAAKuC,EAAQ,UAExC,SAASC,EAAqBxC,EAAKiC,EAAWC,EAAiB,UAClE,GAAIC,EAAanC,GACb,MAAO,GAEX,GAAImC,EAAaF,KAAeD,EAAuBhC,EAAKiC,EAAWC,GACnE,OAAOlC,EAEX,OAAQkC,GACJ,IAAK,SACD,OAAOlC,EAAI4B,OAAOK,EAAUJ,QAChC,IAAK,SACD,OAAO7B,EAAI4B,OAAO,EAAG5B,EAAI6B,OAASI,EAAUJ,QAChD,QACI,OAAO7B,GAGZ,SAASyC,EAAazC,EAAKqC,GAC9B,OAAOG,EAAqBxC,EAAKqC,EAAQ,UAEtC,SAASK,EAAa1C,EAAKuC,GAC9B,OAAOC,EAAqBxC,EAAKuC,EAAQ,UAEtC,SAASI,EAAY3C,EAAK4C,EAAeC,EAAc,IAC1D,MAAMC,EAAQ9C,EAAIC,MAAM,KAClB8C,EAA8B,KAAhBF,EACdC,EAAM9B,QAAOgC,GAAKA,IAAMJ,IACxBE,EAAM1D,KAAI4D,GAAMA,IAAMJ,EAAgBC,EAAcG,IAC1D,OAAOD,EAAYlB,OAAS,EAAIkB,EAAYzD,KAAK,KAAO"}