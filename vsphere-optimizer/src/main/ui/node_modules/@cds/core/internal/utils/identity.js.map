{"version":3,"file":"identity.js","sources":["../../../../src/internal/utils/identity.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport is from 'ramda/es/is.js';\nimport isEmpty from 'ramda/es/isEmpty.js';\nimport isNil from 'ramda/es/isNil.js';\nexport function isNilOrEmpty(val) {\n    return isNil(val) || isEmpty(val);\n}\nexport function isString(val) {\n    return is(String, val);\n}\nexport function isNumericString(val) {\n    return isString(val) && !isEmpty(val.trim()) && +val === +val;\n}\nexport function isStringOrNil(val) {\n    return is(String, val) || isNil(val);\n}\nexport function isStringAndNotNilOrEmpty(val) {\n    return isString(val) && !isNil(val) && !isEmpty(val);\n}\nexport function isObject(val) {\n    return is(Object, val);\n}\nexport function isMap(val) {\n    return is(Map, val);\n}\nexport function isObjectAndNotNilOrEmpty(val) {\n    return !isNilOrEmpty(val) && isObject(val);\n}\nexport function hasPropertyChanged(val, oldVal) {\n    return val !== oldVal;\n}\n// marks nil values (undefined, null, empty string) as changed\nexport function hasStringPropertyChanged(val, oldVal) {\n    return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n}\n// ignores nil values when checking for changes\nexport function hasStringPropertyChangedAndNotNil(val, oldVal) {\n    return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\nexport function getEnumValues(enumeration) {\n    return Object.values(enumeration);\n}\nexport function createId(prefix = '_') {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n}\n// used by deepClone() tested through integration\nfunction cloneMap(mp) {\n    const clonedMap = new Map();\n    for (const [key, val] of mp) {\n        if (isMap(val)) {\n            clonedMap.set(key, cloneMap(val));\n        }\n        else {\n            clonedMap.set(key, val);\n        }\n    }\n    return clonedMap;\n}\nexport function deepClone(obj) {\n    // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n    // be careful using this carelessly b/c it CAN have performance implications!\n    return isMap(obj) ? cloneMap(obj) : JSON.parse(JSON.stringify(obj));\n}\n// this utility is a little restrictive on its inputs. it expects a specific format.\n// going outside of that format (like passing an object or function as the value) can yield unintended results.\n// this does NOT eval anything. that would be bad.\n// 'isValid:true status:success': string =>\n// [['isValid', true], ['status', 'success']]: [string, string | number | boolean][]\nexport function convertStringPropValuePairsToTuple(propValString) {\n    // starts as a string like... \"isValid:true status:success\"\n    return propValString\n        .split(' ')\n        .map(str => str.split(':'))\n        .map(pv => {\n        const [propname, propValAsString] = pv;\n        if (propValAsString === 'true') {\n            return [propname, true];\n        }\n        if (propValAsString === 'false') {\n            return [propname, false];\n        }\n        if (propValAsString === 'null') {\n            return [propname, null];\n        }\n        if (propValAsString === 'undefined') {\n            return [propname, undefined];\n        }\n        if (isNumericString(propValAsString)) {\n            return [propname, +propValAsString];\n        }\n        // else it's a string and that's ok\n        return [propname, propValAsString];\n    });\n    // returns as [['isValide', true], ['status', 'success']]\n}\nexport function anyOrAllPropertiesPass(obj, propValuePairs, anyOrAll) {\n    if (!propValuePairs) {\n        return true;\n    }\n    const tests = convertStringPropValuePairsToTuple(propValuePairs);\n    if (!obj) {\n        return false;\n    }\n    if (tests.length < 1) {\n        return true;\n    }\n    else {\n        const testResults = tests.filter(pvArry => {\n            const [propname, expectedVal] = pvArry;\n            if (expectedVal === false) {\n                return !obj[propname];\n            }\n            return obj[propname] === expectedVal;\n        });\n        return anyOrAll === 'all' ? testResults.length === tests.length : testResults.length > 0;\n    }\n}\nexport function allPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'all');\n}\nexport function anyPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'any');\n}\nexport function getMillisecondsFromSeconds(sec) {\n    return isNil(sec) ? 0 : Number(sec) * 1000;\n}\n"],"names":["isNilOrEmpty","val","isNil","isEmpty","isString","is","String","isNumericString","trim","isStringOrNil","isStringAndNotNilOrEmpty","isObject","Object","isMap","Map","isObjectAndNotNilOrEmpty","hasPropertyChanged","oldVal","hasStringPropertyChanged","hasStringPropertyChangedAndNotNil","getEnumValues","enumeration","values","createId","prefix","Math","random","toString","substr","cloneMap","mp","clonedMap","key","set","deepClone","obj","JSON","parse","stringify","convertStringPropValuePairsToTuple","propValString","split","map","str","pv","propname","propValAsString","undefined","anyOrAllPropertiesPass","propValuePairs","anyOrAll","tests","length","testResults","filter","pvArry","expectedVal","allPropertiesPass","anyPropertiesPass","getMillisecondsFromSeconds","sec","Number"],"mappings":"kGAQO,SAASA,EAAaC,GACzB,OAAOC,EAAMD,IAAQE,EAAQF,GAE1B,SAASG,EAASH,GACrB,OAAOI,EAAGC,OAAQL,GAEf,SAASM,EAAgBN,GAC5B,OAAOG,EAASH,KAASE,EAAQF,EAAIO,UAAYP,IAASA,EAEvD,SAASQ,EAAcR,GAC1B,OAAOI,EAAGC,OAAQL,IAAQC,EAAMD,GAE7B,SAASS,EAAyBT,GACrC,OAAOG,EAASH,KAASC,EAAMD,KAASE,EAAQF,GAE7C,SAASU,EAASV,GACrB,OAAOI,EAAGO,OAAQX,GAEf,SAASY,EAAMZ,GAClB,OAAOI,EAAGS,IAAKb,GAEZ,SAASc,EAAyBd,GACrC,OAAQD,EAAaC,IAAQU,EAASV,GAEnC,SAASe,EAAmBf,EAAKgB,GACpC,OAAOhB,IAAQgB,EAGZ,SAASC,EAAyBjB,EAAKgB,GAC1C,OAAOR,EAAcR,IAAQe,EAAmBf,EAAKgB,GAGlD,SAASE,EAAkClB,EAAKgB,GACnD,OAAQjB,EAAaC,IAAQe,EAAmBf,EAAKgB,GAElD,SAASG,EAAcC,GAC1B,OAAOT,OAAOU,OAAOD,GAElB,SAASE,EAASC,EAAS,KAC9B,MAAO,GAAGA,IAASC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAG5D,SAASC,EAASC,GACd,MAAMC,EAAY,IAAIjB,IACtB,IAAK,MAAOkB,EAAK/B,KAAQ6B,EACjBjB,EAAMZ,GACN8B,EAAUE,IAAID,EAAKH,EAAS5B,IAG5B8B,EAAUE,IAAID,EAAK/B,GAG3B,OAAO8B,EAEJ,SAASG,EAAUC,GAGtB,OAAOtB,EAAMsB,GAAON,EAASM,GAAOC,KAAKC,MAAMD,KAAKE,UAAUH,IAO3D,SAASI,EAAmCC,GAE/C,OAAOA,EACFC,MAAM,KACNC,KAAIC,GAAOA,EAAIF,MAAM,OACrBC,KAAIE,IACL,MAAOC,EAAUC,GAAmBF,EACpC,MAAwB,SAApBE,EACO,CAACD,GAAU,GAEE,UAApBC,EACO,CAACD,GAAU,GAEE,SAApBC,EACO,CAACD,EAAU,MAEE,cAApBC,EACO,CAACD,OAAUE,GAElBxC,EAAgBuC,GACT,CAACD,GAAWC,GAGhB,CAACD,EAAUC,MAInB,SAASE,EAAuBb,EAAKc,EAAgBC,GACxD,IAAKD,EACD,OAAO,EAEX,MAAME,EAAQZ,EAAmCU,GACjD,IAAKd,EACD,OAAO,EAEX,GAAIgB,EAAMC,OAAS,EACf,OAAO,EAEN,CACD,MAAMC,EAAcF,EAAMG,QAAOC,IAC7B,MAAOV,EAAUW,GAAeD,EAChC,OAAoB,IAAhBC,GACQrB,EAAIU,GAETV,EAAIU,KAAcW,KAE7B,MAAoB,QAAbN,EAAqBG,EAAYD,SAAWD,EAAMC,OAASC,EAAYD,OAAS,GAGxF,SAASK,EAAkBtB,EAAKc,GACnC,OAAOD,EAAuBb,EAAKc,EAAgB,OAEhD,SAASS,EAAkBvB,EAAKc,GACnC,OAAOD,EAAuBb,EAAKc,EAAgB,OAEhD,SAASU,EAA2BC,GACvC,OAAO1D,EAAM0D,GAAO,EAAkB,IAAdC,OAAOD"}