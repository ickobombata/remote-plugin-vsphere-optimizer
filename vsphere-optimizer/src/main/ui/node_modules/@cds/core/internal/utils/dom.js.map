{"version":3,"file":"dom.js","sources":["../../../../src/internal/utils/dom.ts"],"sourcesContent":["/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport includes from 'ramda/es/includes.js';\nimport without from 'ramda/es/without.js';\nimport { isStringAndNotNilOrEmpty } from './identity.js';\n/**\n * We are not going to be opinionated about the use of the disabled attribute here.\n * Browsers will manage that on their own. The focus of this is to determine whether\n * or not a tabindex should be set on an element to make it programmatically\n * focusable.\n *\n */\nexport function isFocusable(element) {\n    const elementTagName = element.tagName.toLowerCase();\n    switch (elementTagName) {\n        case 'input':\n        case 'button':\n        case 'select':\n        case 'textarea':\n        case 'object':\n            return true;\n        case 'a':\n        case 'area':\n            return element.hasAttribute('href');\n        case 'audio':\n        case 'video':\n            return element.hasAttribute('controls');\n        default:\n            // we are not going to get into invalid values sent to the\n            // tabindex attr. users have control of that and should avoid\n            // setting tabindex to weird/unsupported values.\n            return element.hasAttribute('tabindex');\n    }\n}\nexport function getElementWidth(element, unit = 'px') {\n    if (element) {\n        return element.getBoundingClientRect ? element.getBoundingClientRect().width + unit : '';\n    }\n    return '';\n}\nexport function getElementWidthUnless(element, unless) {\n    if (!unless) {\n        return getElementWidth(element);\n    }\n    return '';\n}\nexport function isHTMLElement(el) {\n    return !!el && el instanceof HTMLElement;\n}\nexport function hasAttributeAndIsNotEmpty(element, attribute) {\n    return !!element && element.hasAttribute(attribute) && isStringAndNotNilOrEmpty(element.getAttribute(attribute));\n}\nexport function setOrRemoveAttribute(element, attrTuple, test) {\n    const [attribute, value] = attrTuple;\n    if (test()) {\n        setAttributes(element, [attribute, value]);\n    }\n    else {\n        removeAttributes(element, attribute);\n    }\n}\nexport function setAttributes(element, ...attributeTuples) {\n    if (element) {\n        attributeTuples.forEach(([attr, val]) => {\n            if (val === false || val === null) {\n                element.removeAttribute(attr);\n            }\n            else {\n                element.setAttribute(attr, val + '');\n            }\n        });\n    }\n}\nexport function removeAttributes(element, ...attrs) {\n    if (element) {\n        attrs.forEach(attr => {\n            element.removeAttribute(attr);\n        });\n    }\n}\nexport function addAttributeValue(element, attr, value) {\n    if (element) {\n        const currentAttrVal = element.getAttribute(attr);\n        if (!currentAttrVal) {\n            element.setAttribute(attr, value);\n        }\n        else if (!includes(value, currentAttrVal.split(' '))) {\n            // add it only if it is not already there\n            element.setAttribute(attr, currentAttrVal + ' ' + value);\n        }\n    }\n}\nexport function removeAttributeValue(element, attr, value) {\n    if (element) {\n        const currentAttrVal = element.getAttribute(attr);\n        if (currentAttrVal) {\n            // remove the specified value from the list of values currently set\n            const attrValues = without([value], currentAttrVal.split(' '));\n            const newAttrValue = attrValues.join(' ');\n            if (newAttrValue) {\n                element.setAttribute(attr, newAttrValue);\n            }\n            else {\n                element.removeAttribute(attr);\n            }\n        }\n    }\n}\nexport function assignSlotNames(...slotTuples) {\n    slotTuples.forEach(slotTuple => {\n        const [el, slotName] = slotTuple;\n        if (el) {\n            setAttributes(el, ['slot', slotName]);\n        }\n    });\n}\nexport function listenForAttributeChange(element, attrName, fn) {\n    const observer = new MutationObserver(mutations => {\n        if (mutations.find(m => m.attributeName === attrName)) {\n            fn(element.getAttribute(attrName));\n        }\n    });\n    observer.observe(element, { attributes: true });\n    return observer;\n}\nexport function isVisible(element) {\n    return !!element && (element === null || element === void 0 ? void 0 : element.offsetHeight) > 0 && (element === null || element === void 0 ? void 0 : element.hasAttribute('hidden')) === false;\n}\nexport function spanWrapper(nodeList) {\n    Array.from(nodeList)\n        .filter(node => node.textContent && node.textContent.trim().length > 0 && node.nodeType === 3 && node.parentElement)\n        .forEach(node => {\n        const spanWrapper = document.createElement('span');\n        node.after(spanWrapper);\n        spanWrapper.appendChild(node);\n    });\n}\nexport function queryChildFromLightOrShadowDom(hostEl, selector) {\n    var _a;\n    if (!selector) {\n        return null;\n    }\n    return hostEl.querySelector(selector) || ((_a = hostEl === null || hostEl === void 0 ? void 0 : hostEl.shadowRoot) === null || _a === void 0 ? void 0 : _a.querySelector(selector)) || null;\n}\n/** Coerces attribute/property value to a boolean */\nexport function coerceBooleanProperty(value) {\n    return value !== null && value !== undefined && `${value}` !== 'false';\n}\n"],"names":["isFocusable","element","tagName","toLowerCase","hasAttribute","getElementWidth","unit","getBoundingClientRect","width","getElementWidthUnless","unless","isHTMLElement","el","HTMLElement","hasAttributeAndIsNotEmpty","attribute","isStringAndNotNilOrEmpty","getAttribute","setOrRemoveAttribute","attrTuple","test","value","setAttributes","removeAttributes","attributeTuples","forEach","attr","val","removeAttribute","setAttribute","attrs","addAttributeValue","currentAttrVal","includes","split","removeAttributeValue","newAttrValue","without","join","assignSlotNames","slotTuples","slotTuple","slotName","listenForAttributeChange","attrName","fn","observer","MutationObserver","mutations","find","m","attributeName","observe","attributes","isVisible","offsetHeight","spanWrapper","nodeList","Array","from","filter","node","textContent","trim","length","nodeType","parentElement","document","createElement","after","appendChild","queryChildFromLightOrShadowDom","hostEl","selector","_a","querySelector","shadowRoot","coerceBooleanProperty"],"mappings":"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"}