{"version":3,"file":"combobox.d.ts","sources":["combobox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ControlValueAccessor, NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { AriaService } from '../../utils/aria/aria.service';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrLoadingState } from '../../utils/loading/loading';\nimport { LoadingListener } from '../../utils/loading/loading-listener';\nimport { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';\nimport { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';\nimport { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';\nimport { IfControlStateService } from '../common/if-control-state/if-control-state.service';\nimport { WrappedFormControl } from '../common/wrapped-control';\nimport { ClrComboboxContainer } from './combobox-container';\nimport { ComboboxModel } from './model/combobox.model';\nimport { ClrOptionSelected } from './option-selected.directive';\nimport { ComboboxContainerService } from './providers/combobox-container.service';\nimport { ComboboxFocusHandler } from './providers/combobox-focus-handler.service';\nimport { OptionSelectionService } from './providers/option-selection.service';\nexport declare class ClrCombobox<T> extends WrappedFormControl<ClrComboboxContainer> implements ControlValueAccessor, LoadingListener, AfterContentInit {\n    control: NgControl;\n    protected renderer: Renderer2;\n    protected el: ElementRef;\n    optionSelectionService: OptionSelectionService<T>;\n    commonStrings: ClrCommonStringsService;\n    private toggleService;\n    private positionService;\n    private controlStateService;\n    private containerService;\n    private platformId;\n    private ariaService;\n    private focusHandler;\n    private cdr;\n    textbox: ElementRef;\n    trigger: ElementRef;\n    optionSelected: ClrOptionSelected<T>;\n    private onChangeCallback;\n    protected index: number;\n    invalid: boolean;\n    focused: boolean;\n    constructor(vcr: ViewContainerRef, injector: Injector, control: NgControl, renderer: Renderer2, el: ElementRef, optionSelectionService: OptionSelectionService<T>, commonStrings: ClrCommonStringsService, toggleService: ClrPopoverToggleService, positionService: ClrPopoverPositionService, controlStateService: IfControlStateService, containerService: ComboboxContainerService, platformId: any, ariaService: AriaService, focusHandler: ComboboxFocusHandler<T>, cdr: ChangeDetectorRef);\n    focusedPill: any;\n    get id(): string;\n    set id(id: string);\n    inputId(): string;\n    get openState(): boolean;\n    private _searchText;\n    set searchText(text: string);\n    get searchText(): string;\n    get multiSelectModel(): T[];\n    smartPosition: ClrPopoverPosition;\n    loadingStateChange(state: ClrLoadingState): void;\n    private get disabled();\n    unselect(item: T): void;\n    placeholder: string;\n    set multiSelect(value: boolean | string);\n    get multiSelect(): boolean | string;\n    get ariaControls(): string;\n    get ariaOwns(): string;\n    get ariaDescribedBySelection(): string;\n    get displayField(): string;\n    onBlur(): void;\n    onFocus(): void;\n    getSelectionAriaLabel(): string;\n    onKeyUp(event: KeyboardEvent): void;\n    clrInputChange: EventEmitter<string>;\n    clrOpenChange: Observable<boolean>;\n    clrSelectionChange: Observable<ComboboxModel<T>>;\n    private initializeSubscriptions;\n    focusFirstActive(): void;\n    private updateInputValue;\n    private updateControlValue;\n    writeValue(value: T | T[]): void;\n    registerOnChange(onChange: any): void;\n    getActiveDescendant(): string;\n    private onTouchedCallback;\n    registerOnTouched(onTouched: any): void;\n    setDisabledState(): void;\n    focusInput(): void;\n    private getDisplayNames;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n}\n"]}