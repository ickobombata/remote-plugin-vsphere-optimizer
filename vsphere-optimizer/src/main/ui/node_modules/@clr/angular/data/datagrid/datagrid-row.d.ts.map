{"version":3,"file":"datagrid-row.d.ts","sources":["datagrid-row.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, Renderer2, ViewContainerRef } from '@angular/core';\nimport { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';\nimport { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';\nimport { ClrDatagridCell } from './datagrid-cell';\nimport { DatagridIfExpandService } from './datagrid-if-expanded.service';\nimport { SelectionType } from './enums/selection-type';\nimport { DetailService } from './providers/detail.service';\nimport { DisplayModeService } from './providers/display-mode.service';\nimport { ExpandableRowsCount } from './providers/global-expandable-rows';\nimport { Items } from './providers/items';\nimport { RowActionService } from './providers/row-action-service';\nimport { Selection } from './providers/selection';\nexport declare class ClrDatagridRow<T = any> implements AfterContentInit, AfterViewInit {\n    selection: Selection<T>;\n    rowActionService: RowActionService;\n    globalExpandable: ExpandableRowsCount;\n    expand: DatagridIfExpandService;\n    detailService: DetailService;\n    private displayMode;\n    private vcr;\n    private renderer;\n    private el;\n    commonStrings: ClrCommonStringsService;\n    private items;\n    private document;\n    id: string;\n    radioId: string;\n    checkboxId: string;\n    expandableId: string;\n    SELECTION_TYPE: typeof SelectionType;\n    expandAnimation: ClrExpandableAnimation;\n    /**\n     * Model of the row, to use for selection\n     */\n    item: T;\n    replaced: boolean;\n    expandAnimationTrigger: boolean;\n    /**\n     * The default behavior in Chrome and Firefox for shift-clicking on a label is to perform text-selection.\n     * This prevents our intended range-selection, because this text-selection overrides our shift-click event.\n     * We need to clear the stored selection range when shift-clicking. This will override the mostly unused shift-click\n     * selection browser functionality, which is inconsistently implemented in browsers anyway.\n     */\n    clearRanges(event: MouseEvent): void;\n    constructor(selection: Selection<T>, rowActionService: RowActionService, globalExpandable: ExpandableRowsCount, expand: DatagridIfExpandService, detailService: DetailService, displayMode: DisplayModeService, vcr: ViewContainerRef, renderer: Renderer2, el: ElementRef, commonStrings: ClrCommonStringsService, items: Items, document: any);\n    private _selected;\n    /**\n     * Indicates if the row is selected\n     */\n    get selected(): boolean | string;\n    set selected(value: boolean | string);\n    set clrDgSelectable(value: boolean | string);\n    get clrDgSelectable(): boolean | string;\n    selectedChanged: EventEmitter<boolean>;\n    toggle(selected?: boolean): void;\n    get expanded(): boolean | string;\n    set expanded(value: boolean | string);\n    expandedChange: EventEmitter<boolean>;\n    toggleExpand(): void;\n    detailButton: ElementRef;\n    private _detailOpenLabel;\n    set clrDgDetailOpenLabel(label: string);\n    get clrDgDetailOpenLabel(): string;\n    private _detailCloseLabel;\n    set clrDgDetailCloseLabel(label: string);\n    get clrDgDetailCloseLabel(): string;\n    /*****\n     * property dgCells\n     *\n     * @description\n     * A Query List of the ClrDatagrid cells in this row.\n     *\n     */\n    dgCells: QueryList<ClrDatagridCell>;\n    ngAfterContentInit(): void;\n    ngAfterViewInit(): void;\n    private rangeSelect;\n    private subscriptions;\n    ngOnDestroy(): void;\n    displayCells: boolean;\n    _stickyCells: ViewContainerRef;\n    _scrollableCells: ViewContainerRef;\n    _calculatedCells: ViewContainerRef;\n    private wrappedInjector;\n    ngOnInit(): void;\n    get _view(): any;\n}\n"]}