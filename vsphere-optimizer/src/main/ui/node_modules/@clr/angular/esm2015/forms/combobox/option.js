/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ComboboxFocusHandler, OptionData as OptionProxy } from './providers/combobox-focus-handler.service';
import { OptionSelectionService } from './providers/option-selection.service';
export class ClrOption {
    constructor(elRef, commonStrings, focusHandler, optionSelectionService, autoId) {
        this.elRef = elRef;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.optionSelectionService = optionSelectionService;
        this.autoId = autoId;
        // A proxy with only the necessary data to be used for a11y and the focus handler service.
        this.optionProxy = new OptionProxy(null, null);
        this.optionProxy.el = this.elRef.nativeElement;
    }
    set optionId(id) {
        this._id = id;
        this.optionProxy.id = this._id;
    }
    get optionId() {
        return this._id;
    }
    set value(value) {
        this._value = value;
        this.optionProxy.value = value;
    }
    get value() {
        return this._value;
    }
    get selected() {
        return (this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value));
    }
    ngOnInit() {
        if (!this._id) {
            this._id = 'clr-option-' + this.autoId;
            this.optionProxy.id = this._id;
        }
    }
    onClick() {
        if (this.optionSelectionService.multiselectable) {
            this.optionSelectionService.toggle(this.value);
        }
        else {
            this.optionSelectionService.select(this.value);
        }
        // As the popover stays open in multi-select mode now, we have to take focus back to the input
        // This way we achieve two things:
        // - do not lose focus
        // - we're still able to use onBlur for "outside-click" handling
        this.focusHandler.focusInput();
    }
    get focusClass() {
        return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);
    }
}
ClrOption.decorators = [
    { type: Component, args: [{
                selector: 'clr-option',
                template: `
    <ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only">{{ commonStrings.keys.comboboxSelected }}</span>
  `,
                providers: [UNIQUE_ID_PROVIDER],
                host: {
                    '[class.clr-combobox-option]': 'true',
                    '[attr.role]': '"option"',
                    // Do not remove. Or click-selection will not work.
                    '[attr.tabindex]': '-1',
                    '[attr.id]': 'optionId',
                }
            },] }
];
ClrOption.ctorParameters = () => [
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ComboboxFocusHandler },
    { type: OptionSelectionService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrOption.propDecorators = {
    optionId: [{ type: Input, args: ['id',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    selected: [{ type: HostBinding, args: ['class.active',] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    focusClass: [{ type: HostBinding, args: ['class.clr-focus',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZm9ybXMvY29tYm9ib3gvb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFFeEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzlGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxVQUFVLElBQUksV0FBVyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDN0csT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFnQjlFLE1BQU0sT0FBTyxTQUFTO0lBK0JwQixZQUNTLEtBQWlCLEVBQ2pCLGFBQXNDLEVBQ3JDLFlBQXFDLEVBQ3JDLHNCQUFpRCxFQUM5QixNQUFjO1FBSmxDLFVBQUssR0FBTCxLQUFLLENBQVk7UUFDakIsa0JBQWEsR0FBYixhQUFhLENBQXlCO1FBQ3JDLGlCQUFZLEdBQVosWUFBWSxDQUF5QjtRQUNyQywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTJCO1FBQzlCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFuQzNDLDBGQUEwRjtRQUNuRixnQkFBVyxHQUFtQixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFvQy9ELElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQ2pELENBQUM7SUFsQ0QsSUFDSSxRQUFRLENBQUMsRUFBVTtRQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBR0QsSUFDSSxLQUFLLENBQUMsS0FBUTtRQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFDSSxRQUFRO1FBQ1YsT0FBTyxDQUNMLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUNsSCxDQUFDO0lBQ0osQ0FBQztJQVlELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNiLElBQUksQ0FBQyxHQUFHLEdBQUcsYUFBYSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdkMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNoQztJQUNILENBQUM7SUFHRCxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsZUFBZSxFQUFFO1lBQy9DLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2hEO2FBQU07WUFDTCxJQUFJLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDtRQUNELDhGQUE4RjtRQUM5RixrQ0FBa0M7UUFDbEMsc0JBQXNCO1FBQ3RCLGdFQUFnRTtRQUNoRSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUNJLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7O1lBaEZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsWUFBWTtnQkFDdEIsUUFBUSxFQUFFOzs7R0FHVDtnQkFDRCxTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztnQkFDL0IsSUFBSSxFQUFFO29CQUNKLDZCQUE2QixFQUFFLE1BQU07b0JBQ3JDLGFBQWEsRUFBRSxVQUFVO29CQUN6QixtREFBbUQ7b0JBQ25ELGlCQUFpQixFQUFFLElBQUk7b0JBQ3ZCLFdBQVcsRUFBRSxVQUFVO2lCQUN4QjthQUNGOzs7WUFwQm1CLFVBQVU7WUFFckIsdUJBQXVCO1lBRXZCLG9CQUFvQjtZQUNwQixzQkFBc0I7eUNBb0QxQixNQUFNLFNBQUMsU0FBUzs7O3VCQS9CbEIsS0FBSyxTQUFDLElBQUk7b0JBVVYsS0FBSyxTQUFDLFVBQVU7dUJBU2hCLFdBQVcsU0FBQyxjQUFjO3NCQXdCMUIsWUFBWSxTQUFDLE9BQU87eUJBY3BCLFdBQVcsU0FBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IFVOSVFVRV9JRCwgVU5JUVVFX0lEX1BST1ZJREVSIH0gZnJvbSAnLi4vLi4vdXRpbHMvaWQtZ2VuZXJhdG9yL2lkLWdlbmVyYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbWJvYm94Rm9jdXNIYW5kbGVyLCBPcHRpb25EYXRhIGFzIE9wdGlvblByb3h5IH0gZnJvbSAnLi9wcm92aWRlcnMvY29tYm9ib3gtZm9jdXMtaGFuZGxlci5zZXJ2aWNlJztcbmltcG9ydCB7IE9wdGlvblNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9vcHRpb24tc2VsZWN0aW9uLnNlcnZpY2UnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLW9wdGlvbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxzcGFuICpuZ0lmPVwic2VsZWN0ZWRcIiBjbGFzcz1cImNsci1zci1vbmx5XCI+e3sgY29tbW9uU3RyaW5ncy5rZXlzLmNvbWJvYm94U2VsZWN0ZWQgfX08L3NwYW4+XG4gIGAsXG4gIHByb3ZpZGVyczogW1VOSVFVRV9JRF9QUk9WSURFUl0sXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmNsci1jb21ib2JveC1vcHRpb25dJzogJ3RydWUnLFxuICAgICdbYXR0ci5yb2xlXSc6ICdcIm9wdGlvblwiJyxcbiAgICAvLyBEbyBub3QgcmVtb3ZlLiBPciBjbGljay1zZWxlY3Rpb24gd2lsbCBub3Qgd29yay5cbiAgICAnW2F0dHIudGFiaW5kZXhdJzogJy0xJyxcbiAgICAnW2F0dHIuaWRdJzogJ29wdGlvbklkJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyT3B0aW9uPFQ+IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLy8gQSBwcm94eSB3aXRoIG9ubHkgdGhlIG5lY2Vzc2FyeSBkYXRhIHRvIGJlIHVzZWQgZm9yIGExMXkgYW5kIHRoZSBmb2N1cyBoYW5kbGVyIHNlcnZpY2UuXG4gIHB1YmxpYyBvcHRpb25Qcm94eTogT3B0aW9uUHJveHk8VD4gPSBuZXcgT3B0aW9uUHJveHkobnVsbCwgbnVsbCk7XG5cbiAgcHJpdmF0ZSBfaWQ6IHN0cmluZztcbiAgQElucHV0KCdpZCcpXG4gIHNldCBvcHRpb25JZChpZDogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSBpZDtcbiAgICB0aGlzLm9wdGlvblByb3h5LmlkID0gdGhpcy5faWQ7XG4gIH1cbiAgZ2V0IG9wdGlvbklkKCkge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIHByaXZhdGUgX3ZhbHVlOiBUO1xuICBASW5wdXQoJ2NsclZhbHVlJylcbiAgc2V0IHZhbHVlKHZhbHVlOiBUKSB7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvblByb3h5LnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgZ2V0IHZhbHVlKCk6IFQge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYWN0aXZlJylcbiAgZ2V0IHNlbGVjdGVkKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uTW9kZWwgJiYgdGhpcy5vcHRpb25TZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdGlvbk1vZGVsLmNvbnRhaW5zSXRlbSh0aGlzLnZhbHVlKVxuICAgICk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZWxSZWY6IEVsZW1lbnRSZWYsXG4gICAgcHVibGljIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9jdXNIYW5kbGVyOiBDb21ib2JveEZvY3VzSGFuZGxlcjxUPixcbiAgICBwcml2YXRlIG9wdGlvblNlbGVjdGlvblNlcnZpY2U6IE9wdGlvblNlbGVjdGlvblNlcnZpY2U8VD4sXG4gICAgQEluamVjdChVTklRVUVfSUQpIHByaXZhdGUgYXV0b0lkOiBzdHJpbmdcbiAgKSB7XG4gICAgdGhpcy5vcHRpb25Qcm94eS5lbCA9IHRoaXMuZWxSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICghdGhpcy5faWQpIHtcbiAgICAgIHRoaXMuX2lkID0gJ2Nsci1vcHRpb24tJyArIHRoaXMuYXV0b0lkO1xuICAgICAgdGhpcy5vcHRpb25Qcm94eS5pZCA9IHRoaXMuX2lkO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcbiAgb25DbGljaygpIHtcbiAgICBpZiAodGhpcy5vcHRpb25TZWxlY3Rpb25TZXJ2aWNlLm11bHRpc2VsZWN0YWJsZSkge1xuICAgICAgdGhpcy5vcHRpb25TZWxlY3Rpb25TZXJ2aWNlLnRvZ2dsZSh0aGlzLnZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25TZWxlY3Rpb25TZXJ2aWNlLnNlbGVjdCh0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgLy8gQXMgdGhlIHBvcG92ZXIgc3RheXMgb3BlbiBpbiBtdWx0aS1zZWxlY3QgbW9kZSBub3csIHdlIGhhdmUgdG8gdGFrZSBmb2N1cyBiYWNrIHRvIHRoZSBpbnB1dFxuICAgIC8vIFRoaXMgd2F5IHdlIGFjaGlldmUgdHdvIHRoaW5nczpcbiAgICAvLyAtIGRvIG5vdCBsb3NlIGZvY3VzXG4gICAgLy8gLSB3ZSdyZSBzdGlsbCBhYmxlIHRvIHVzZSBvbkJsdXIgZm9yIFwib3V0c2lkZS1jbGlja1wiIGhhbmRsaW5nXG4gICAgdGhpcy5mb2N1c0hhbmRsZXIuZm9jdXNJbnB1dCgpO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jbHItZm9jdXMnKVxuICBnZXQgZm9jdXNDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5mb2N1c0hhbmRsZXIucHNldWRvRm9jdXMuY29udGFpbnNJdGVtKHRoaXMub3B0aW9uUHJveHkpO1xuICB9XG59XG4iXX0=