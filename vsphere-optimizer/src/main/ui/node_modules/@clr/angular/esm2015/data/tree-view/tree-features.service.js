/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Optional, SkipSelf } from '@angular/core';
import { Subject } from 'rxjs';
export class TreeFeaturesService {
    constructor() {
        this.selectable = false;
        this.eager = true;
        this.childrenFetched = new Subject();
    }
}
TreeFeaturesService.decorators = [
    { type: Injectable }
];
export function treeFeaturesFactory(existing) {
    return existing || new TreeFeaturesService();
}
export const TREE_FEATURES_PROVIDER = {
    provide: TreeFeaturesService,
    useFactory: treeFeaturesFactory,
    /*
     * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will
     * instantiate a new service and all its children will reuse the root's instance.
     * If there are several roots (in this case, several independent trees on a page), each root will instantiate
     * its own service so they won't interfere with one another.
     *
     * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.
     */
    deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1mZWF0dXJlcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvZGF0YS90cmVlLXZpZXcvdHJlZS1mZWF0dXJlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFDNUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU0vQixNQUFNLE9BQU8sbUJBQW1CO0lBRGhDO1FBRUUsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUNuQixVQUFLLEdBQUcsSUFBSSxDQUFDO1FBS2Isb0JBQWUsR0FBa0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUNqRCxDQUFDOzs7WUFUQSxVQUFVOztBQVdYLE1BQU0sVUFBVSxtQkFBbUIsQ0FBSSxRQUFnQztJQUNyRSxPQUFPLFFBQVEsSUFBSSxJQUFJLG1CQUFtQixFQUFFLENBQUM7QUFDL0MsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHO0lBQ3BDLE9BQU8sRUFBRSxtQkFBbUI7SUFDNUIsVUFBVSxFQUFFLG1CQUFtQjtJQUMvQjs7Ozs7OztPQU9HO0lBQ0gsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztDQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIyIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2tpcFNlbGYsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFJlY3Vyc2l2ZVRyZWVOb2RlTW9kZWwgfSBmcm9tICcuL21vZGVscy9yZWN1cnNpdmUtdHJlZS1ub2RlLm1vZGVsJztcbmltcG9ydCB7IENsclJlY3Vyc2l2ZUZvck9mQ29udGV4dCB9IGZyb20gJy4vcmVjdXJzaXZlLWZvci1vZic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUcmVlRmVhdHVyZXNTZXJ2aWNlPFQ+IHtcbiAgc2VsZWN0YWJsZSA9IGZhbHNlO1xuICBlYWdlciA9IHRydWU7XG4gIHJlY3Vyc2lvbjoge1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxDbHJSZWN1cnNpdmVGb3JPZkNvbnRleHQ8VD4+O1xuICAgIHJvb3Q6IFJlY3Vyc2l2ZVRyZWVOb2RlTW9kZWw8VD5bXTtcbiAgfTtcbiAgY2hpbGRyZW5GZXRjaGVkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyZWVGZWF0dXJlc0ZhY3Rvcnk8VD4oZXhpc3Rpbmc6IFRyZWVGZWF0dXJlc1NlcnZpY2U8VD4pIHtcbiAgcmV0dXJuIGV4aXN0aW5nIHx8IG5ldyBUcmVlRmVhdHVyZXNTZXJ2aWNlKCk7XG59XG5cbmV4cG9ydCBjb25zdCBUUkVFX0ZFQVRVUkVTX1BST1ZJREVSID0ge1xuICBwcm92aWRlOiBUcmVlRmVhdHVyZXNTZXJ2aWNlLFxuICB1c2VGYWN0b3J5OiB0cmVlRmVhdHVyZXNGYWN0b3J5LFxuICAvKlxuICAgKiBUaGUgT3B0aW9uYWwgKyBTa2lwU2VsZiBwYXR0ZXJuIGVuc3VyZXMgdGhhdCBpbiBjYXNlIG9mIG5lc3RlZCBjb21wb25lbnRzLCBvbmx5IHRoZSByb290IG9uZSB3aWxsXG4gICAqIGluc3RhbnRpYXRlIGEgbmV3IHNlcnZpY2UgYW5kIGFsbCBpdHMgY2hpbGRyZW4gd2lsbCByZXVzZSB0aGUgcm9vdCdzIGluc3RhbmNlLlxuICAgKiBJZiB0aGVyZSBhcmUgc2V2ZXJhbCByb290cyAoaW4gdGhpcyBjYXNlLCBzZXZlcmFsIGluZGVwZW5kZW50IHRyZWVzIG9uIGEgcGFnZSksIGVhY2ggcm9vdCB3aWxsIGluc3RhbnRpYXRlXG4gICAqIGl0cyBvd24gc2VydmljZSBzbyB0aGV5IHdvbid0IGludGVyZmVyZSB3aXRoIG9uZSBhbm90aGVyLlxuICAgKlxuICAgKiBUTDtEUiAtIE9wdGlvbmFsICsgU2tpcFNlbGYgPSAxIGluc3RhbmNlIG9mIFRyZWVGZWF0dXJlc1NlcnZpY2UgcGVyIHRyZWUuXG4gICAqL1xuICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgVHJlZUZlYXR1cmVzU2VydmljZV1dLFxufTtcbiJdfQ==