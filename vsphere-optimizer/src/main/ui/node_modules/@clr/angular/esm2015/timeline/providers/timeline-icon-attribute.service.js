/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrTimelineStepState } from '../enums/timeline-step-state.enum';
export class TimelineIconAttributeService {
    constructor(commonStrings) {
        this.attributeMap = new Map();
        this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
            iconShape: 'circle',
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepNotStarted,
        });
        this.attributeMap.set(ClrTimelineStepState.CURRENT, {
            iconShape: 'dot-circle',
            iconStatus: 'info',
            ariaLabel: commonStrings.keys.timelineStepCurrent,
        });
        this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
            iconShape: undefined,
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepProcessing,
        });
        this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
            iconShape: 'success-standard',
            iconStatus: 'success',
            ariaLabel: commonStrings.keys.timelineStepSuccess,
        });
        this.attributeMap.set(ClrTimelineStepState.ERROR, {
            iconShape: 'error-standard',
            iconStatus: 'danger',
            ariaLabel: commonStrings.keys.timelineStepError,
        });
    }
    getAriaLabel(step) {
        return this.attributeMap.get(step).ariaLabel;
    }
    getIconShape(step) {
        return this.attributeMap.get(step).iconShape;
    }
    getIconStatus(step) {
        return this.attributeMap.get(step).iconStatus;
    }
}
TimelineIconAttributeService.decorators = [
    { type: Injectable }
];
TimelineIconAttributeService.ctorParameters = () => [
    { type: ClrCommonStringsService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXIvc3JjL3RpbWVsaW5lL3Byb3ZpZGVycy90aW1lbGluZS1pY29uLWF0dHJpYnV0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBSXpFLE1BQU0sT0FBTyw0QkFBNEI7SUFHdkMsWUFBWSxhQUFzQztRQUYxQyxpQkFBWSxHQUE4QyxJQUFJLEdBQUcsRUFBd0MsQ0FBQztRQUdoSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUU7WUFDdEQsU0FBUyxFQUFFLFFBQVE7WUFDbkIsVUFBVSxFQUFFLElBQUk7WUFDaEIsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsc0JBQXNCO1NBQ3JELENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sRUFBRTtZQUNsRCxTQUFTLEVBQUUsWUFBWTtZQUN2QixVQUFVLEVBQUUsTUFBTTtZQUNsQixTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBbUI7U0FDbEQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFO1lBQ3JELFNBQVMsRUFBRSxTQUFTO1lBQ3BCLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtTQUNyRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7WUFDbEQsU0FBUyxFQUFFLGtCQUFrQjtZQUM3QixVQUFVLEVBQUUsU0FBUztZQUNyQixTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBbUI7U0FDbEQsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO1lBQ2hELFNBQVMsRUFBRSxnQkFBZ0I7WUFDM0IsVUFBVSxFQUFFLFFBQVE7WUFDcEIsU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsaUJBQWlCO1NBQ2hELENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxZQUFZLENBQUMsSUFBMEI7UUFDNUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDL0MsQ0FBQztJQUVNLFlBQVksQ0FBQyxJQUEwQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMvQyxDQUFDO0lBRU0sYUFBYSxDQUFDLElBQTBCO1FBQzdDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDO0lBQ2hELENBQUM7OztZQTFDRixVQUFVOzs7WUFKRix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyVGltZWxpbmVTdGVwU3RhdGUgfSBmcm9tICcuLi9lbnVtcy90aW1lbGluZS1zdGVwLXN0YXRlLmVudW0nO1xuaW1wb3J0IHsgSWNvbkF0dHJpYnV0ZXMgfSBmcm9tICcuLi9pbnRlcmZhY2UvaWNvbi1hdHRyaWJ1dGUuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRpbWVsaW5lSWNvbkF0dHJpYnV0ZVNlcnZpY2Uge1xuICBwcml2YXRlIGF0dHJpYnV0ZU1hcDogTWFwPENsclRpbWVsaW5lU3RlcFN0YXRlLCBJY29uQXR0cmlidXRlcz4gPSBuZXcgTWFwPENsclRpbWVsaW5lU3RlcFN0YXRlLCBJY29uQXR0cmlidXRlcz4oKTtcblxuICBjb25zdHJ1Y3Rvcihjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSkge1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5OT1RfU1RBUlRFRCwge1xuICAgICAgaWNvblNoYXBlOiAnY2lyY2xlJyxcbiAgICAgIGljb25TdGF0dXM6IG51bGwsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBOb3RTdGFydGVkLFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5DVVJSRU5ULCB7XG4gICAgICBpY29uU2hhcGU6ICdkb3QtY2lyY2xlJyxcbiAgICAgIGljb25TdGF0dXM6ICdpbmZvJyxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcEN1cnJlbnQsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLlBST0NFU1NJTkcsIHtcbiAgICAgIGljb25TaGFwZTogdW5kZWZpbmVkLFxuICAgICAgaWNvblN0YXR1czogbnVsbCxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcFByb2Nlc3NpbmcsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLlNVQ0NFU1MsIHtcbiAgICAgIGljb25TaGFwZTogJ3N1Y2Nlc3Mtc3RhbmRhcmQnLFxuICAgICAgaWNvblN0YXR1czogJ3N1Y2Nlc3MnLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwU3VjY2VzcyxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuRVJST1IsIHtcbiAgICAgIGljb25TaGFwZTogJ2Vycm9yLXN0YW5kYXJkJyxcbiAgICAgIGljb25TdGF0dXM6ICdkYW5nZXInLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwRXJyb3IsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QXJpYUxhYmVsKHN0ZXA6IENsclRpbWVsaW5lU3RlcFN0YXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXAuZ2V0KHN0ZXApLmFyaWFMYWJlbDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJY29uU2hhcGUoc3RlcDogQ2xyVGltZWxpbmVTdGVwU3RhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcC5nZXQoc3RlcCkuaWNvblNoYXBlO1xuICB9XG5cbiAgcHVibGljIGdldEljb25TdGF0dXMoc3RlcDogQ2xyVGltZWxpbmVTdGVwU3RhdGUpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZU1hcC5nZXQoc3RlcCkuaWNvblN0YXR1cztcbiAgfVxufVxuIl19