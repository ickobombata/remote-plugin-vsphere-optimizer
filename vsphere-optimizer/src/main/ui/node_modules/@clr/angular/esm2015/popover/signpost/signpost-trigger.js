/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, PLATFORM_ID } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { SignpostFocusManager } from './providers/signpost-focus-manager.service';
import { SignpostIdService } from './providers/signpost-id.service';
/*********
 *
 * @description
 * A Directive added to the ClrSignpost Trigger button that will call the ClrSignpost.toggle() function to hide/show the
 * ClrSignpostContent.
 *
 */
export class ClrSignpostTrigger {
    constructor(toggleService, el, commonStrings, signpostIdService, signpostFocusManager, document, platformId) {
        this.toggleService = toggleService;
        this.el = el;
        this.commonStrings = commonStrings;
        this.signpostIdService = signpostIdService;
        this.signpostFocusManager = signpostFocusManager;
        this.platformId = platformId;
        this.subscriptions = [];
        this.document = document;
    }
    ngOnInit() {
        this.signpostFocusManager.triggerEl = this.el.nativeElement;
        this.subscriptions.push(this.toggleService.openChange.subscribe((isOpen) => {
            this.ariaExpanded = isOpen;
            const prevIsOpen = this.isOpen;
            this.isOpen = isOpen;
            // openChange fires false on initialization because signpost starts as closed by default
            // but we shouldn't focus on that initial false value
            // we should focus back only if it's closed after being opened
            if (!this.isOpen && prevIsOpen) {
                this.focusOnClose();
            }
        }), this.signpostIdService.id.subscribe(idChange => (this.ariaControl = idChange)));
        this.addDefaultAriaLabel(this.el.nativeElement);
    }
    addDefaultAriaLabel(el) {
        if (!el.hasAttribute('aria-label')) {
            el.setAttribute('aria-label', this.commonStrings.keys.signpostToggle);
        }
    }
    focusOnClose() {
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        // we have to set the focus back on the trigger only if the focus is reset back to the body element
        // if the focus is on another element, we are not allowed to move that focus back to this trigger again.
        if (!this.isOpen && this.document.activeElement === this.document.body) {
            this.signpostFocusManager.focusTrigger();
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
    /**********
     *
     * @description
     * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.
     */
    onSignpostTriggerClick(event) {
        this.toggleService.toggleWithEvent(event);
    }
}
ClrSignpostTrigger.decorators = [
    { type: Directive, args: [{
                selector: '[clrSignpostTrigger]',
                host: {
                    class: 'signpost-trigger',
                    '[attr.aria-expanded]': 'ariaExpanded',
                    '[attr.aria-controls]': 'ariaControl',
                    '[class.active]': 'isOpen',
                },
            },] }
];
ClrSignpostTrigger.ctorParameters = () => [
    { type: ClrPopoverToggleService },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: SignpostIdService },
    { type: SignpostFocusManager },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ClrSignpostTrigger.propDecorators = {
    onSignpostTriggerClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,