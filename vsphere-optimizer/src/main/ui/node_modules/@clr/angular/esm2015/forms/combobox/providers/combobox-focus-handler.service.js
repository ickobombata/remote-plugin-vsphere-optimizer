/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID, RendererFactory2 } from '@angular/core';
import { take } from 'rxjs/operators';
import { KeyCodes } from '../../../utils/enums/key-codes.enum';
import { ArrowKeyDirection } from '../../../utils/focus/arrow-key-direction.enum';
import { customFocusableItemProvider } from '../../../utils/focus/focusable-item/custom-focusable-item-provider';
import { keyValidator } from '../../../utils/focus/key-focus/util';
import { UNIQUE_ID } from '../../../utils/id-generator/id-generator.service';
import { ClrPopoverToggleService } from '../../../utils/popover/providers/popover-toggle.service';
import { PseudoFocusModel } from '../model/pseudo-focus.model';
import { OptionSelectionService } from './option-selection.service';
export class ComboboxFocusHandler {
    constructor(id, rendererFactory, toggleService, selectionService, platformId) {
        this.id = id;
        this.toggleService = toggleService;
        this.selectionService = selectionService;
        this.platformId = platformId;
        this.pseudoFocus = new PseudoFocusModel();
        this.optionData = [];
        this.handleFocusSubscription();
        // Direct renderer injection can be problematic and leads to failing tests at least
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    handleFocusSubscription() {
        this.toggleService.openChange.subscribe(open => {
            if (!open) {
                this.pseudoFocus.model = null;
            }
        });
    }
    get trigger() {
        return this._trigger;
    }
    set trigger(el) {
        this._trigger = el;
        this.addFocusOnBlurListener(el);
    }
    get listbox() {
        return this._listbox;
    }
    set listbox(el) {
        this._listbox = el;
        this.addFocusOnBlurListener(el);
    }
    get textInput() {
        return this._textInput;
    }
    set textInput(el) {
        this._textInput = el;
        this.renderer.listen(el, 'keydown', event => !this.handleTextInput(event));
        this.addFocusOnBlurListener(el);
    }
    moveFocusTo(direction) {
        let index = this.optionData.findIndex(option => option.equals(this.pseudoFocus.model));
        if (direction === ArrowKeyDirection.UP) {
            if (index === -1 || index === 0) {
                index = this.optionData.length - 1;
            }
            else {
                index--;
            }
        }
        else if (direction === ArrowKeyDirection.DOWN) {
            if (index === -1 || index === this.optionData.length - 1) {
                index = 0;
            }
            else {
                index++;
            }
        }
        this.pseudoFocus.select(this.optionData[index]);
        if (this.pseudoFocus.model && this.pseudoFocus.model.el) {
            this.pseudoFocus.model.el.scrollIntoView({ behavior: 'smooth', block: 'center', inline: 'nearest' });
        }
    }
    openAndMoveTo(direction) {
        if (!this.toggleService.open) {
            this.toggleService.openChange.pipe(take(1)).subscribe(open => {
                if (open) {
                    this.moveFocusTo(direction);
                }
            });
            this.toggleService.open = true;
        }
        else {
            this.moveFocusTo(direction);
        }
    }
    // this service is only interested in keys that may move the focus
    handleTextInput(event) {
        let preventDefault = false;
        const key = keyValidator(event.key);
        if (event) {
            switch (key) {
                case KeyCodes.Enter:
                    if (this.toggleService.open && this.pseudoFocus.model) {
                        if (this.selectionService.multiselectable) {
                            this.selectionService.toggle(this.pseudoFocus.model.value);
                        }
                        else {
                            this.selectionService.select(this.pseudoFocus.model.value);
                        }
                        preventDefault = true;
                    }
                    break;
                case KeyCodes.Space:
                    if (!this.toggleService.open) {
                        this.toggleService.open = true;
                        preventDefault = true;
                    }
                    break;
                case KeyCodes.ArrowUp:
                    this.preventViewportScrolling(event);
                    this.openAndMoveTo(ArrowKeyDirection.UP);
                    preventDefault = true;
                    break;
                case KeyCodes.ArrowDown:
                    this.preventViewportScrolling(event);
                    this.openAndMoveTo(ArrowKeyDirection.DOWN);
                    preventDefault = true;
                    break;
                default:
                    // Any other keypress
                    if (event.key !== KeyCodes.Tab &&
                        !(this.selectionService.multiselectable && event.key === KeyCodes.Backspace) &&
                        !(event.key === KeyCodes.Escape) &&
                        !this.toggleService.open) {
                        this.toggleService.open = true;
                    }
                    break;
            }
        }
        return preventDefault;
    }
    preventViewportScrolling(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    focusInput() {
        if (this.textInput && isPlatformBrowser(this.platformId)) {
            this.textInput.focus();
        }
    }
    addFocusOnBlurListener(el) {
        if (isPlatformBrowser(this.platformId)) {
            this.renderer.listen(el, 'blur', event => {
                if (this.focusOutOfComponent(event)) {
                    this.toggleService.open = false;
                    // Workaround for popover close-on-outside-click timing issues in Edge browser
                    if (this.componentCdRef) {
                        this.componentCdRef.detectChanges();
                    }
                }
            });
        }
    }
    focusOutOfComponent(event) {
        // event.relatedTarget is null in IE11. In that case we use document.activeElement
        // which points to the element that becomes active as the blur event occurs on the input.
        const target = (event.relatedTarget || document.activeElement);
        return !(this.textInput.contains(target) || this.trigger.contains(target) || this.listbox.contains(target));
    }
    focusFirstActive() {
        if (this.optionData.length > 0) {
            if (this.selectionService.selectionModel.isEmpty()) {
                this.pseudoFocus.select(this.optionData[0]);
            }
            else {
                let firstActive;
                if (this.selectionService.multiselectable) {
                    firstActive = this.selectionService.selectionModel.model[0];
                }
                else {
                    firstActive = this.selectionService.selectionModel.model;
                }
                const activeProxy = this.optionData.find(option => option.value === firstActive);
                if (activeProxy) {
                    // active element is visible
                    this.pseudoFocus.select(activeProxy);
                }
                else {
                    // we have active element, but it's filtered out
                    this.pseudoFocus.select(this.optionData[0]);
                }
            }
        }
    }
    addOptionValues(options) {
        this.optionData = options;
    }
}
ComboboxFocusHandler.decorators = [
    { type: Injectable }
];
ComboboxFocusHandler.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: RendererFactory2 },
    { type: ClrPopoverToggleService },
    { type: OptionSelectionService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
export const COMBOBOX_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(ComboboxFocusHandler);
export class OptionData {
    constructor(id, value) {
        this.id = id;
        this.value = value;
    }
    equals(other) {
        if (!other) {
            return false;
        }
        return this.id === other.id && this.value === other.value;
    }
}
//# sourceMappingURL=data:application/json;base64,