/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT } from '@angular/common';
import { Component, ContentChildren, ElementRef, Inject, Input, Optional, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';
import { AriaService } from '../../utils/aria/aria.service';
import { IF_ACTIVE_ID } from '../../utils/conditional/if-active.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrOption } from './option';
import { ComboboxFocusHandler } from './providers/combobox-focus-handler.service';
import { OptionSelectionService } from './providers/option-selection.service';
let nbOptionsComponents = 0;
export class ClrOptions {
    constructor(optionSelectionService, id, ariaService, el, commonStrings, focusHandler, toggleService, parentHost, document) {
        this.optionSelectionService = optionSelectionService;
        this.id = id;
        this.ariaService = ariaService;
        this.el = el;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.toggleService = toggleService;
        this.document = document;
        this.loading = false;
        this.subscriptions = [];
        if (!parentHost) {
            throw new Error('clr-options should only be used inside of a clr-combobox');
        }
        if (!this.optionsId) {
            this.optionsId = 'clr-options-' + nbOptionsComponents++;
        }
    }
    searchText(input) {
        return this.commonStrings.parse(this.commonStrings.keys.comboboxSearching, { INPUT: input });
    }
    /**
     * Tests if the list of options is empty, meaning it doesn't contain any items
     */
    get emptyOptions() {
        return !this.optionSelectionService.loading && this.items.length === 0;
    }
    set optionsId(id) {
        this.ariaService.ariaControls = id;
        this.ariaService.ariaOwns = id;
    }
    get optionsId() {
        return this.ariaService.ariaControls;
    }
    set items(items) {
        this._items = items;
        this.focusHandler.addOptionValues(this._items.map(option => option.optionProxy));
    }
    get items() {
        return this._items;
    }
    loadingStateChange(state) {
        this.loading = state === ClrLoadingState.LOADING;
    }
    ngAfterViewInit() {
        this.focusHandler.listbox = this.el.nativeElement;
        this.subscriptions.push(fromEvent(this.document, 'scroll', { capture: true }).subscribe(event => {
            if (this.toggleService.open &&
                event.target !== this.el.nativeElement &&
                event.target !== this.focusHandler.textInput) {
                this.toggleService.open = false;
            }
        }), this.items.changes.subscribe(() => {
            setTimeout(() => {
                this.focusHandler.focusFirstActive();
            });
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
}
ClrOptions.decorators = [
    { type: Component, args: [{
                selector: 'clr-options',
                template: `
    <div *ngIf="optionSelectionService.loading" class="clr-combobox-options-loading">
      <clr-spinner clrInline>
        {{ commonStrings.keys.loading }}
      </clr-spinner>
      <span class="clr-combobox-options-text">
        {{ searchText(optionSelectionService.currentInput) }}
      </span>
    </div>

    <!-- Rendered if data set is empty -->
    <div *ngIf="emptyOptions">
      <span class="clr-combobox-options-empty-text">
        {{ commonStrings.keys.comboboxNoResults }}
      </span>
    </div>

    <!--Option Groups and Options will be projected here-->
    <ng-content></ng-content>
  `,
                providers: [{ provide: LoadingListener, useExisting: ClrOptions }],
                host: {
                    '[class.clr-combobox-options]': 'true',
                    '[attr.role]': '"listbox"',
                    '[id]': 'optionsId',
                }
            },] }
];
ClrOptions.ctorParameters = () => [
    { type: OptionSelectionService },
    { type: Number, decorators: [{ type: Inject, args: [IF_ACTIVE_ID,] }] },
    { type: AriaService },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ComboboxFocusHandler },
    { type: ClrPopoverToggleService },
    { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ClrOptions.propDecorators = {
    optionsId: [{ type: Input, args: ['id',] }],
    items: [{ type: ContentChildren, args: [ClrOption,] }]
};
//# sourceMappingURL=data:application/json;base64,