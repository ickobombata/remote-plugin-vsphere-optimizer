/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, HostListener, Inject, Injector, Input, PLATFORM_ID, Renderer2, } from '@angular/core';
import { FocusTrapTracker } from './focus-trap-tracker.service';
export const FOCUSABLES = '[href]:not([tabindex="-1"]), button:not([disabled]):not([tabindex="-1"]), input:not([disabled]):not([tabindex="-1"]), select:not([disabled]):not([tabindex="-1"]), textarea:not([disabled]):not([tabindex="-1"]), [contenteditable="true"]:not([tabindex="-1"]), [tabindex]:not([tabindex="-1"]) ';
export class FocusTrapDirective {
    constructor(el, injector, focusTrapsTracker, renderer, platformId) {
        this.el = el;
        this.injector = injector;
        this.focusTrapsTracker = focusTrapsTracker;
        this.renderer = renderer;
        this.platformId = platformId;
        this.localFocusEscaped = false;
        this._config = {
            strict: true,
        };
        this.document = this.injector.get(DOCUMENT);
        this.focusTrapsTracker.current = this;
    }
    set config(config) {
        this._config = Object.assign(this._config, config === '' ? {} : config);
    }
    onFocusIn(event) {
        const nativeElement = this.el.nativeElement;
        if (this.focusTrapsTracker.current !== this ||
            !isPlatformBrowser(this.platformId) ||
            this.localFocusEscaped ||
            nativeElement.contains(event.target)) {
            return;
        }
        if (event.target === this.topReboundEl && nativeElement.contains(event.relatedTarget)) {
            this.focusLastFocusable();
            // if it fails to focus element inside the trap, focus the trap element.
            this.focusTrapElIfOutside();
        }
        else if (event.target === this.bottomReboundEl && nativeElement.contains(event.relatedTarget)) {
            this.focusFirstFocusable();
            // if it fails to focus element inside the trap, focus the trap element.
            this.focusTrapElIfOutside();
        }
        else {
            this._config.strict ? this.el.nativeElement.focus() : (this.localFocusEscaped = true);
        }
    }
    createFocusableOffScreenEl() {
        // Not using Renderer2's createElement method because that leads to DOM leakage.
        // https://github.com/angular/angular/issues/26954
        const offScreenSpan = this.document.createElement('span');
        this.renderer.setAttribute(offScreenSpan, 'tabindex', '0');
        this.renderer.addClass(offScreenSpan, 'offscreen-focus-rebounder');
        return offScreenSpan;
    }
    addReboundEls() {
        if (isPlatformBrowser(this.platformId)) {
            this.topReboundEl = this.createFocusableOffScreenEl();
            this.bottomReboundEl = this.createFocusableOffScreenEl();
            const hostElement = this.el.nativeElement;
            // Add reboundBeforeTrapEl right outside of host element
            this.renderer.insertBefore(hostElement.parentElement, this.topReboundEl, hostElement);
            // Add reboundAfterTrapEl right after host element
            if (hostElement.nextSibling) {
                this.renderer.insertBefore(hostElement.parentNode, this.bottomReboundEl, hostElement.nextSibling);
            }
            else {
                this.renderer.appendChild(hostElement.parentNode, this.bottomReboundEl);
            }
        }
    }
    removeReboundEls() {
        if (isPlatformBrowser(this.platformId) && this.topReboundEl && this.bottomReboundEl) {
            this.parentElement.removeChild(this.topReboundEl);
            this.parentElement.removeChild(this.bottomReboundEl);
            // These are here to to make sure that
            // we completely delete all traces of the removed DOM objects.
            delete this.topReboundEl;
            delete this.bottomReboundEl;
        }
    }
    setPreviousFocus() {
        if (this.previousActiveElement && this.previousActiveElement.focus) {
            this.previousActiveElement.focus();
        }
    }
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');
            this.el.nativeElement.focus();
        }
    }
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.previousActiveElement = this.document.activeElement;
            this.parentElement = this.el.nativeElement.parentElement;
        }
        this.addReboundEls();
    }
    get potentiallyFocusableEls() {
        return [...this.el.nativeElement.querySelectorAll(FOCUSABLES)];
    }
    focusFirstFocusable() {
        for (let i = 0; i < this.potentiallyFocusableEls.length; i++) {
            this.firstFocusableEl = this.focusElement(this.potentiallyFocusableEls[i]);
            if (this.firstFocusableEl) {
                break;
            }
        }
    }
    focusLastFocusable() {
        for (let i = this.potentiallyFocusableEls.length - 1; i >= 0; i--) {
            this.lastFocusableEl = this.focusElement(this.potentiallyFocusableEls[i]);
            if (this.lastFocusableEl) {
                break;
            }
        }
    }
    focusTrapElIfOutside() {
        if (!this.el.nativeElement.contains(document.activeElement)) {
            this.el.nativeElement.focus();
        }
    }
    focusElement(el) {
        if (el && el.focus) {
            el.focus();
            if (document.activeElement === el) {
                return el;
            }
        }
        return null;
    }
    ngOnDestroy() {
        this.removeReboundEls();
        this.setPreviousFocus();
        this.focusTrapsTracker.activatePreviousTrapper();
    }
}
FocusTrapDirective.decorators = [
    { type: Directive, args: [{
                selector: '[clrFocusTrap]',
            },] }
];
FocusTrapDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: FocusTrapTracker },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
FocusTrapDirective.propDecorators = {
    config: [{ type: Input, args: ['clrFocusTrap',] }],
    onFocusIn: [{ type: HostListener, args: ['document:focusin', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,