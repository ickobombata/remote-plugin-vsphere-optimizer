/*
 * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { circleIcon, ClarityIcons, dotCircleIcon, errorStandardIcon, successStandardIcon } from '@cds/core/icon';
import { ClrIconModule } from '../icon/icon.module';
import { ClrSpinnerModule } from '../progress/spinner/spinner.module';
import { ClrTimeline } from './timeline';
import { ClrTimelineStep } from './timeline-step';
import { ClrTimelineStepDescription } from './timeline-step-description';
import { ClrTimelineStepHeader } from './timeline-step-header';
import { ClrTimelineStepTitle } from './timeline-step-title';
const CLR_TIMELINE_DIRECTIVES = [
    ClrTimeline,
    ClrTimelineStep,
    ClrTimelineStepDescription,
    ClrTimelineStepHeader,
    ClrTimelineStepTitle,
];
export class ClrTimelineModule {
    constructor() {
        ClarityIcons.addIcons(circleIcon, dotCircleIcon, errorStandardIcon, successStandardIcon);
    }
}
ClrTimelineModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ClrIconModule, ClrSpinnerModule],
                exports: [...CLR_TIMELINE_DIRECTIVES, ClrIconModule, ClrSpinnerModule],
                declarations: [CLR_TIMELINE_DIRECTIVES],
            },] }
];
ClrTimelineModule.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci9zcmMvdGltZWxpbmUvdGltZWxpbmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBUSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVqSCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDekUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFN0QsTUFBTSx1QkFBdUIsR0FBZ0I7SUFDM0MsV0FBVztJQUNYLGVBQWU7SUFDZiwwQkFBMEI7SUFDMUIscUJBQXFCO0lBQ3JCLG9CQUFvQjtDQUNyQixDQUFDO0FBT0YsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QjtRQUNFLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0lBQzNGLENBQUM7OztZQVJGLFFBQVEsU0FBQztnQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixDQUFDO2dCQUN4RCxPQUFPLEVBQUUsQ0FBQyxHQUFHLHVCQUF1QixFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsQ0FBQztnQkFDdEUsWUFBWSxFQUFFLENBQUMsdUJBQXVCLENBQUM7YUFDeEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjIgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOZ01vZHVsZSwgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgY2lyY2xlSWNvbiwgQ2xhcml0eUljb25zLCBkb3RDaXJjbGVJY29uLCBlcnJvclN0YW5kYXJkSWNvbiwgc3VjY2Vzc1N0YW5kYXJkSWNvbiB9IGZyb20gJ0BjZHMvY29yZS9pY29uJztcblxuaW1wb3J0IHsgQ2xySWNvbk1vZHVsZSB9IGZyb20gJy4uL2ljb24vaWNvbi5tb2R1bGUnO1xuaW1wb3J0IHsgQ2xyU3Bpbm5lck1vZHVsZSB9IGZyb20gJy4uL3Byb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci5tb2R1bGUnO1xuaW1wb3J0IHsgQ2xyVGltZWxpbmUgfSBmcm9tICcuL3RpbWVsaW5lJztcbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcCB9IGZyb20gJy4vdGltZWxpbmUtc3RlcCc7XG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBEZXNjcmlwdGlvbiB9IGZyb20gJy4vdGltZWxpbmUtc3RlcC1kZXNjcmlwdGlvbic7XG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBIZWFkZXIgfSBmcm9tICcuL3RpbWVsaW5lLXN0ZXAtaGVhZGVyJztcbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcFRpdGxlIH0gZnJvbSAnLi90aW1lbGluZS1zdGVwLXRpdGxlJztcblxuY29uc3QgQ0xSX1RJTUVMSU5FX0RJUkVDVElWRVM6IFR5cGU8YW55PltdID0gW1xuICBDbHJUaW1lbGluZSxcbiAgQ2xyVGltZWxpbmVTdGVwLFxuICBDbHJUaW1lbGluZVN0ZXBEZXNjcmlwdGlvbixcbiAgQ2xyVGltZWxpbmVTdGVwSGVhZGVyLFxuICBDbHJUaW1lbGluZVN0ZXBUaXRsZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIENsckljb25Nb2R1bGUsIENsclNwaW5uZXJNb2R1bGVdLFxuICBleHBvcnRzOiBbLi4uQ0xSX1RJTUVMSU5FX0RJUkVDVElWRVMsIENsckljb25Nb2R1bGUsIENsclNwaW5uZXJNb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtDTFJfVElNRUxJTkVfRElSRUNUSVZFU10sXG59KVxuZXhwb3J0IGNsYXNzIENsclRpbWVsaW5lTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgQ2xhcml0eUljb25zLmFkZEljb25zKGNpcmNsZUljb24sIGRvdENpcmNsZUljb24sIGVycm9yU3RhbmRhcmRJY29uLCBzdWNjZXNzU3RhbmRhcmRJY29uKTtcbiAgfVxufVxuIl19