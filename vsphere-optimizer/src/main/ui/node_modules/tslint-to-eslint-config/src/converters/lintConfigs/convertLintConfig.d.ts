import { FileSystem } from "../../adapters/fileSystem";
import { SansDependencies } from "../../binding";
import { AllOriginalConfigurations } from "../../input/findOriginalConfigurations";
import { ResultWithStatus, TSLintToESLintSettings } from "../../types";
import { createESLintConfiguration } from "./createESLintConfiguration";
import { logMissingPackages } from "./reporting/packages/logMissingPackages";
import { reportConfigConversionResults } from "./reporting/reportConfigConversionResults";
export type ConvertLintConfigDependencies = {
    createESLintConfiguration: SansDependencies<typeof createESLintConfiguration>;
    fileSystem: Pick<FileSystem, "writeFile">;
    logMissingPackages: SansDependencies<typeof logMissingPackages>;
    reportConfigConversionResults: SansDependencies<typeof reportConfigConversionResults>;
};
/**
 * Root-level driver to convert a TSLint configuration to ESLint.
 * @see `/docs/Architecture/Linters.md` for documentation.
 */
export declare const convertLintConfig: (dependencies: ConvertLintConfigDependencies, settings: TSLintToESLintSettings, originalConfigurations: AllOriginalConfigurations, ruleEquivalents: Map<string, string[]>) => Promise<ResultWithStatus>;
