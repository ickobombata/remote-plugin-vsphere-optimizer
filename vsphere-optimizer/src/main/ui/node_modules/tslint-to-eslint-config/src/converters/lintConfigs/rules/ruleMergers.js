"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ruleMergers = void 0;
const ban_types_1 = require("./ruleMergers/ban-types");
const consistent_type_assertions_1 = require("./ruleMergers/consistent-type-assertions");
const indent_1 = require("./ruleMergers/indent");
const jsx_a11y_alt_text_1 = require("./ruleMergers/jsx-a11y-alt-text");
const member_delimiter_style_1 = require("./ruleMergers/member-delimiter-style");
const naming_convention_1 = require("./ruleMergers/naming-convention");
const no_empty_1 = require("./ruleMergers/no-empty");
const no_eval_1 = require("./ruleMergers/no-eval");
const no_unnecessary_type_assertion_1 = require("./ruleMergers/no-unnecessary-type-assertion");
const no_use_before_define_1 = require("./ruleMergers/no-use-before-define");
const triple_slash_reference_1 = require("./ruleMergers/triple-slash-reference");
exports.ruleMergers = new Map([
    ["@typescript-eslint/ban-types", ban_types_1.mergeBanTypes],
    ["@typescript-eslint/consistent-type-assertions", consistent_type_assertions_1.mergeConsistentTypeAssertions],
    ["@typescript-eslint/indent", indent_1.mergeIndent],
    ["@typescript-eslint/member-delimiter-style", member_delimiter_style_1.mergeNoMemberDelimiterStyle],
    ["@typescript-eslint/naming-convention", naming_convention_1.mergeNamingConvention],
    ["@typescript-eslint/no-use-before-define", no_use_before_define_1.mergeNoUseBeforeDefine],
    ["@typescript-eslint/no-unnecessary-type-assertion", no_unnecessary_type_assertion_1.mergeNoUnnecessaryTypeAssertion],
    ["@typescript-eslint/triple-slash-reference", triple_slash_reference_1.mergeTripleSlashReference],
    ["jsx-a11y/alt-text", jsx_a11y_alt_text_1.mergeJsxA11yAltText],
    ["no-empty", no_empty_1.mergeNoEmpty],
    ["no-eval", no_eval_1.mergeNoEval],
]);
//# sourceMappingURL=ruleMergers.js.map