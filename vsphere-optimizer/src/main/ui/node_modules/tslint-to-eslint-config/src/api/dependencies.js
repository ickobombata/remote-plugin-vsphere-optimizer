"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCliDependencies = exports.convertLintConfigDependencies = exports.convertEditorConfigsDependencies = exports.reportEditorConfigConversionResultsDependencies = exports.editorConfigDescriptors = exports.convertEditorConfigDependencies = exports.writeConversionResultsDependencies = exports.reportEditorSettingConversionResultsDependencies = exports.reportConversionResultsDependencies = exports.logMissingPackagesDependencies = exports.createESLintConfigurationDependencies = exports.choosePackageManagerDependencies = exports.summarizePackageRulesDependencies = exports.retrieveExtendsValuesDependencies = exports.convertCommentsDependencies = exports.extractGlobPathsDependencies = exports.collectCommentFileNamesDependencies = exports.findOriginalConfigurationsDependencies = exports.findConfigurationDependencies = exports.boundImporter = exports.nativeImporterDependencies = exports.convertRulesDependencies = exports.reportCommentResultsDependencies = exports.convertFileCommentsDependencies = void 0;
const childProcessExec_1 = require("../adapters/childProcessExec");
const fsFileSystem_1 = require("../adapters/fsFileSystem");
const globAsync_1 = require("../adapters/globAsync");
const nativeImporter_1 = require("../adapters/nativeImporter");
const processLogger_1 = require("../adapters/processLogger");
const binding_1 = require("../binding");
const collectCommentFileNames_1 = require("../comments/collectCommentFileNames");
const convertComments_1 = require("../converters/comments/convertComments");
const convertFileComments_1 = require("../converters/comments/convertFileComments");
const extractGlobPaths_1 = require("../converters/comments/extractGlobPaths");
const reportCommentResults_1 = require("../converters/comments/reporting/reportCommentResults");
const convertEditorConfig_1 = require("../converters/editorConfigs/convertEditorConfig");
const convertEditorConfigs_1 = require("../converters/editorConfigs/convertEditorConfigs");
const convertAtomConfig_1 = require("../converters/editorConfigs/converters/convertAtomConfig");
const convertVSCodeConfig_1 = require("../converters/editorConfigs/converters/convertVSCodeConfig");
const reportEditorConfigConversionResults_1 = require("../converters/editorConfigs/reporting/reportEditorConfigConversionResults");
const convertLintConfig_1 = require("../converters/lintConfigs/convertLintConfig");
const createESLintConfiguration_1 = require("../converters/lintConfigs/createESLintConfiguration");
const removeExtendsDuplicatedRules_1 = require("../converters/lintConfigs/pruning/removeExtendsDuplicatedRules");
const choosePackageManager_1 = require("../converters/lintConfigs/reporting/packages/choosePackageManager");
const logMissingPackages_1 = require("../converters/lintConfigs/reporting/packages/logMissingPackages");
const reportConfigConversionResults_1 = require("../converters/lintConfigs/reporting/reportConfigConversionResults");
const convertRules_1 = require("../converters/lintConfigs/rules/convertRules");
const ruleConverters_1 = require("../converters/lintConfigs/rules/ruleConverters");
const ruleMergers_1 = require("../converters/lintConfigs/rules/ruleMergers");
const checkPrettierExtension_1 = require("../converters/lintConfigs/summarization/prettier/checkPrettierExtension");
const retrieveExtendsValues_1 = require("../converters/lintConfigs/summarization/retrieveExtendsValues");
const summarizePackageRules_1 = require("../converters/lintConfigs/summarization/summarizePackageRules");
const findESLintConfiguration_1 = require("../input/findESLintConfiguration");
const findOriginalConfigurations_1 = require("../input/findOriginalConfigurations");
const findPackagesConfiguration_1 = require("../input/findPackagesConfiguration");
const findTSLintConfiguration_1 = require("../input/findTSLintConfiguration");
const findTypeScriptConfiguration_1 = require("../input/findTypeScriptConfiguration");
const importer_1 = require("../input/importer");
const mergeLintConfigurations_1 = require("../input/mergeLintConfigurations");
exports.convertFileCommentsDependencies = {
    converters: ruleConverters_1.ruleConverters,
    fileSystem: fsFileSystem_1.fsFileSystem,
};
exports.reportCommentResultsDependencies = {
    logger: processLogger_1.processLogger,
};
exports.convertRulesDependencies = {
    ruleConverters: ruleConverters_1.ruleConverters,
    ruleMergers: ruleMergers_1.ruleMergers,
};
exports.nativeImporterDependencies = {
    fileSystem: fsFileSystem_1.fsFileSystem,
    getCwd: () => process.cwd(),
    nativeImporter: nativeImporter_1.nativeImporter,
};
exports.boundImporter = (0, binding_1.bind)(importer_1.importer, exports.nativeImporterDependencies);
exports.findConfigurationDependencies = {
    exec: childProcessExec_1.childProcessExec,
    importer: exports.boundImporter,
    platform: process.platform,
};
exports.findOriginalConfigurationsDependencies = {
    findESLintConfiguration: (0, binding_1.bind)(findESLintConfiguration_1.findESLintConfiguration, exports.findConfigurationDependencies),
    findPackagesConfiguration: (0, binding_1.bind)(findPackagesConfiguration_1.findPackagesConfiguration, exports.findConfigurationDependencies),
    findTypeScriptConfiguration: (0, binding_1.bind)(findTypeScriptConfiguration_1.findTypeScriptConfiguration, exports.findConfigurationDependencies),
    findTSLintConfiguration: (0, binding_1.bind)(findTSLintConfiguration_1.findTSLintConfiguration, exports.findConfigurationDependencies),
    mergeLintConfigurations: mergeLintConfigurations_1.mergeLintConfigurations,
};
exports.collectCommentFileNamesDependencies = {
    findTypeScriptConfiguration: (0, binding_1.bind)(findTypeScriptConfiguration_1.findTypeScriptConfiguration, exports.findConfigurationDependencies),
};
exports.extractGlobPathsDependencies = {
    globAsync: globAsync_1.globAsync,
};
exports.convertCommentsDependencies = {
    collectCommentFileNames: (0, binding_1.bind)(collectCommentFileNames_1.collectCommentFileNames, exports.collectCommentFileNamesDependencies),
    convertFileComments: (0, binding_1.bind)(convertFileComments_1.convertFileComments, exports.convertFileCommentsDependencies),
    extractGlobPaths: (0, binding_1.bind)(extractGlobPaths_1.extractGlobPaths, exports.extractGlobPathsDependencies),
    reportCommentResults: (0, binding_1.bind)(reportCommentResults_1.reportCommentResults, exports.reportCommentResultsDependencies),
};
exports.retrieveExtendsValuesDependencies = {
    importer: exports.boundImporter,
};
exports.summarizePackageRulesDependencies = {
    checkPrettierExtension: checkPrettierExtension_1.checkPrettierExtension,
    removeExtendsDuplicatedRules: removeExtendsDuplicatedRules_1.removeExtendsDuplicatedRules,
    retrieveExtendsValues: (0, binding_1.bind)(retrieveExtendsValues_1.retrieveExtendsValues, exports.retrieveExtendsValuesDependencies),
};
exports.choosePackageManagerDependencies = {
    fileSystem: fsFileSystem_1.fsFileSystem,
};
exports.createESLintConfigurationDependencies = {
    convertRules: (0, binding_1.bind)(convertRules_1.convertRules, exports.convertRulesDependencies),
    summarizePackageRules: (0, binding_1.bind)(summarizePackageRules_1.summarizePackageRules, exports.summarizePackageRulesDependencies),
};
exports.logMissingPackagesDependencies = {
    choosePackageManager: (0, binding_1.bind)(choosePackageManager_1.choosePackageManager, exports.choosePackageManagerDependencies),
    logger: processLogger_1.processLogger,
};
exports.reportConversionResultsDependencies = {
    logger: processLogger_1.processLogger,
};
exports.reportEditorSettingConversionResultsDependencies = {
    logger: processLogger_1.processLogger,
};
exports.writeConversionResultsDependencies = {
    fileSystem: fsFileSystem_1.fsFileSystem,
};
exports.convertEditorConfigDependencies = {
    fileSystem: fsFileSystem_1.fsFileSystem,
};
exports.editorConfigDescriptors = [
    [".atom/config.cson", convertAtomConfig_1.convertAtomConfig],
    [".vscode/settings.json", convertVSCodeConfig_1.convertVSCodeConfig],
];
exports.reportEditorConfigConversionResultsDependencies = {
    logger: processLogger_1.processLogger,
};
exports.convertEditorConfigsDependencies = {
    convertEditorConfig: (0, binding_1.bind)(convertEditorConfig_1.convertEditorConfig, exports.convertEditorConfigDependencies),
    editorConfigDescriptors: exports.editorConfigDescriptors,
    reportEditorConfigConversionResults: (0, binding_1.bind)(reportEditorConfigConversionResults_1.reportEditorConfigConversionResults, exports.reportEditorConfigConversionResultsDependencies),
};
exports.convertLintConfigDependencies = {
    createESLintConfiguration: (0, binding_1.bind)(createESLintConfiguration_1.createESLintConfiguration, exports.createESLintConfigurationDependencies),
    fileSystem: fsFileSystem_1.fsFileSystem,
    logMissingPackages: (0, binding_1.bind)(logMissingPackages_1.logMissingPackages, exports.logMissingPackagesDependencies),
    reportConfigConversionResults: (0, binding_1.bind)(reportConfigConversionResults_1.reportConfigConversionResults, exports.reportConversionResultsDependencies),
};
exports.runCliDependencies = {
    converters: [
        (0, binding_1.bind)(convertLintConfig_1.convertLintConfig, exports.convertLintConfigDependencies),
        (0, binding_1.bind)(convertEditorConfigs_1.convertEditorConfigs, exports.convertEditorConfigsDependencies),
        (0, binding_1.bind)(convertComments_1.convertComments, exports.convertCommentsDependencies),
    ],
    findOriginalConfigurations: (0, binding_1.bind)(findOriginalConfigurations_1.findOriginalConfigurations, exports.findOriginalConfigurationsDependencies),
    logger: processLogger_1.processLogger,
};
//# sourceMappingURL=dependencies.js.map